
controlECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002656  000026ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800180  00800180  0000280a  2**0
                  ALLOC
  3 .stab         00002424  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001336  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006106  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000062f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008703  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ac60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ae20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b116  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 29 13 	jmp	0x2652	; 0x2652 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 16 13 	jmp	0x262c	; 0x262c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 02 13 	jmp	0x2604	; 0x2604 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 16 13 	jmp	0x262c	; 0x262c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
 */
void timerCallBack_60Sec (void);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2e 97       	sbiw	r28, 0x0e	; 14
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61

	/*initialization*/
	    Buzzer_init();	/* Initialize buzzer */
     e42:	0e 94 b2 09 	call	0x1364	; 0x1364 <Buzzer_init>
	    DcMotor_Init(); /* Initialize DC_motor */
     e46:	0e 94 4a 0a 	call	0x1494	; 0x1494 <DcMotor_Init>
		/* I2C configurations with address of 1 and 400 Kbit/sec (Fast Mode)*/
	    TWI_ConfigType s_twiConfiguration = {1, 400};
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	80 e9       	ldi	r24, 0x90	; 144
     e50:	8a 83       	std	Y+2, r24	; 0x02
		TWI_init (&s_twiConfiguration);
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <TWI_init>
		/* UART configurations with 8 Bits data, No parity, one stop bit and 9600 baud rate*/
		UART_ConfigType s_uartConfiguration = {EIGHT_BITS, Disabled, one_bit, BR_9600};
     e5a:	9e 01       	movw	r18, r28
     e5c:	2d 5f       	subi	r18, 0xFD	; 253
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	3b 87       	std	Y+11, r19	; 0x0b
     e62:	2a 87       	std	Y+10, r18	; 0x0a
     e64:	8a e7       	ldi	r24, 0x7A	; 122
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	9d 87       	std	Y+13, r25	; 0x0d
     e6a:	8c 87       	std	Y+12, r24	; 0x0c
     e6c:	95 e0       	ldi	r25, 0x05	; 5
     e6e:	9e 87       	std	Y+14, r25	; 0x0e
     e70:	ec 85       	ldd	r30, Y+12	; 0x0c
     e72:	fd 85       	ldd	r31, Y+13	; 0x0d
     e74:	00 80       	ld	r0, Z
     e76:	2c 85       	ldd	r18, Y+12	; 0x0c
     e78:	3d 85       	ldd	r19, Y+13	; 0x0d
     e7a:	2f 5f       	subi	r18, 0xFF	; 255
     e7c:	3f 4f       	sbci	r19, 0xFF	; 255
     e7e:	3d 87       	std	Y+13, r19	; 0x0d
     e80:	2c 87       	std	Y+12, r18	; 0x0c
     e82:	ea 85       	ldd	r30, Y+10	; 0x0a
     e84:	fb 85       	ldd	r31, Y+11	; 0x0b
     e86:	00 82       	st	Z, r0
     e88:	2a 85       	ldd	r18, Y+10	; 0x0a
     e8a:	3b 85       	ldd	r19, Y+11	; 0x0b
     e8c:	2f 5f       	subi	r18, 0xFF	; 255
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	3b 87       	std	Y+11, r19	; 0x0b
     e92:	2a 87       	std	Y+10, r18	; 0x0a
     e94:	3e 85       	ldd	r19, Y+14	; 0x0e
     e96:	31 50       	subi	r19, 0x01	; 1
     e98:	3e 87       	std	Y+14, r19	; 0x0e
     e9a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e9c:	88 23       	and	r24, r24
     e9e:	41 f7       	brne	.-48     	; 0xe70 <main+0x42>
		UART_init (&s_uartConfiguration);
     ea0:	ce 01       	movw	r24, r28
     ea2:	03 96       	adiw	r24, 0x03	; 3
     ea4:	0e 94 91 11 	call	0x2322	; 0x2322 <UART_init>


		SET_BIT (SREG, 7);/* Enable I-bit */
     ea8:	af e5       	ldi	r26, 0x5F	; 95
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ef e5       	ldi	r30, 0x5F	; 95
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	8c 93       	st	X, r24

	/*super loop*/
	 	while(1){
	 		switch (g_matchingFlag){
     eb6:	80 91 80 01 	lds	r24, 0x0180
     eba:	e8 2f       	mov	r30, r24
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	f9 87       	std	Y+9, r31	; 0x09
     ec0:	e8 87       	std	Y+8, r30	; 0x08
     ec2:	28 85       	ldd	r18, Y+8	; 0x08
     ec4:	39 85       	ldd	r19, Y+9	; 0x09
     ec6:	21 15       	cp	r18, r1
     ec8:	31 05       	cpc	r19, r1
     eca:	31 f0       	breq	.+12     	; 0xed8 <main+0xaa>
     ecc:	88 85       	ldd	r24, Y+8	; 0x08
     ece:	99 85       	ldd	r25, Y+9	; 0x09
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	91 05       	cpc	r25, r1
     ed4:	21 f0       	breq	.+8      	; 0xede <main+0xb0>
     ed6:	ef cf       	rjmp	.-34     	; 0xeb6 <main+0x88>
	 		 case 0:receivePassword(); break;/* When there is no matching between new and confirmation passwords receive new password again */
     ed8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <receivePassword>
     edc:	ec cf       	rjmp	.-40     	; 0xeb6 <main+0x88>
	 		 case 1:getDefinedPassword();  break;/* When the new pass and confirmation are matched start the system options by receiving the user choice*/
     ede:	0e 94 a2 08 	call	0x1144	; 0x1144 <getDefinedPassword>
     ee2:	e9 cf       	rjmp	.-46     	; 0xeb6 <main+0x88>

00000ee4 <timerCallBack_15Sec>:
 * Timer1 first call back function after counting 15 seconds:
 * 1. First call stops the motor for 3 seconds after 15 seconds and initialize the timer for counting 3 seconds.
 * 2. Second call stops the motor after gate is closed and de-initialise the timer.
 */
void timerCallBack_15Sec (void)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <timerCallBack_15Sec+0x6>
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter = 0;
	counter++;
     eee:	80 91 81 01 	lds	r24, 0x0181
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	80 93 81 01 	sts	0x0181, r24
	switch (counter)
     ef8:	80 91 81 01 	lds	r24, 0x0181
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	3a 83       	std	Y+2, r19	; 0x02
     f02:	29 83       	std	Y+1, r18	; 0x01
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	91 05       	cpc	r25, r1
     f0c:	31 f0       	breq	.+12     	; 0xf1a <timerCallBack_15Sec+0x36>
     f0e:	29 81       	ldd	r18, Y+1	; 0x01
     f10:	3a 81       	ldd	r19, Y+2	; 0x02
     f12:	24 30       	cpi	r18, 0x04	; 4
     f14:	31 05       	cpc	r19, r1
     f16:	81 f0       	breq	.+32     	; 0xf38 <timerCallBack_15Sec+0x54>
     f18:	17 c0       	rjmp	.+46     	; 0xf48 <timerCallBack_15Sec+0x64>
	{
	case 2:
		DcMotor_Rotate(stop, 0);					   /* Stop the motor after being unlocking for 15 seconds */
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
		Timer1_deInit ();
     f22:	0e 94 c9 10 	call	0x2192	; 0x2192 <Timer1_deInit>
		Timer1_setCallBack (timerCallBack_3Sec);   /* Set the second call back */
     f26:	89 ea       	ldi	r24, 0xA9	; 169
     f28:	97 e0       	ldi	r25, 0x07	; 7
     f2a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <Timer1_setCallBack>
		Timer1_init (&s_timerConfigurations_3Sec); /* Start to count 3 seconds for door to start locking again */
     f2e:	8e e6       	ldi	r24, 0x6E	; 110
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 57 10 	call	0x20ae	; 0x20ae <Timer1_init>
     f36:	08 c0       	rjmp	.+16     	; 0xf48 <timerCallBack_15Sec+0x64>
		break;
	case 4:
		DcMotor_Rotate(stop, 0);						   /* Stop the motor after being locked again */
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
		Timer1_deInit ();						   /* De_initialize the timer */
     f40:	0e 94 c9 10 	call	0x2192	; 0x2192 <Timer1_deInit>
		counter = 0;
     f44:	10 92 81 01 	sts	0x0181, r1
	}
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <timerCallBack_3Sec>:
 * Description:
 * Timer1 second call back function after counting 3 seconds:
 * 1. After being called initialize the timer for counting another 15 seconds for the door to start locking.
 */
void timerCallBack_3Sec (void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(A_CW, 100);					/* rotate motor CCW after being stopped for 3 seconds */
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	64 e6       	ldi	r22, 0x64	; 100
     f5e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
	Timer1_deInit ();
     f62:	0e 94 c9 10 	call	0x2192	; 0x2192 <Timer1_deInit>
	Timer1_init (&s_timerConfigurations_15Sec); /* Start to count 15 seconds for door to be locked again */
     f66:	88 e6       	ldi	r24, 0x68	; 104
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 57 10 	call	0x20ae	; 0x20ae <Timer1_init>
	Timer1_setCallBack (timerCallBack_15Sec);   /* Set the first call back */
     f6e:	82 e7       	ldi	r24, 0x72	; 114
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	0e 94 d7 10 	call	0x21ae	; 0x21ae <Timer1_setCallBack>
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <timerCallBack_60Sec>:
 * Description:
 * Timer1 third call back function after counting 1 minute:
 * 1. After being called stops the buzzer ringing which started when 3 consecutive passwords are wrong.
 */
void timerCallBack_60Sec (void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter = 0;
	counter++;
     f84:	80 91 82 01 	lds	r24, 0x0182
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	80 93 82 01 	sts	0x0182, r24
	/* Because it takes 8 ISR to count 1 minute */
	if (counter == 8)
     f8e:	80 91 82 01 	lds	r24, 0x0182
     f92:	88 30       	cpi	r24, 0x08	; 8
     f94:	31 f4       	brne	.+12     	; 0xfa2 <timerCallBack_60Sec+0x26>
	{
		Buzzer_off ();							/* Stop the buzzer after 1 minute */
     f96:	0e 94 cf 09 	call	0x139e	; 0x139e <Buzzer_off>
		Timer1_deInit ();						/* De_initialize the timer */
     f9a:	0e 94 c9 10 	call	0x2192	; 0x2192 <Timer1_deInit>
		counter = 0;
     f9e:	10 92 82 01 	sts	0x0182, r1
	}
}
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <receivePassword>:


void receivePassword(){
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	60 97       	sbiw	r28, 0x10	; 16
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
	uint8 counter=0;
     fbc:	18 8a       	std	Y+16, r1	; 0x10
	uint8 i;
	/* Receive the 2 passwords */
		UART_receiveString (g_passwordControlEcu);
     fbe:	84 e9       	ldi	r24, 0x94	; 148
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 66 12 	call	0x24cc	; 0x24cc <UART_receiveString>
		UART_receiveString (g_passwordConfirmControlEcu);
     fc6:	8d e8       	ldi	r24, 0x8D	; 141
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 66 12 	call	0x24cc	; 0x24cc <UART_receiveString>
		for(i=0;i<5;i++){
     fce:	1f 86       	std	Y+15, r1	; 0x0f
     fd0:	1a c0       	rjmp	.+52     	; 0x1006 <receivePassword+0x5e>
			if(g_passwordControlEcu[i]!=g_passwordConfirmControlEcu[i]){
     fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	fc 01       	movw	r30, r24
     fda:	ec 56       	subi	r30, 0x6C	; 108
     fdc:	fe 4f       	sbci	r31, 0xFE	; 254
     fde:	20 81       	ld	r18, Z
     fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	e3 57       	subi	r30, 0x73	; 115
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	80 81       	ld	r24, Z
     fee:	28 17       	cp	r18, r24
     ff0:	21 f0       	breq	.+8      	; 0xffa <receivePassword+0x52>
				//g_matchingFlag=0;
				UART_sendByte (WRONG_PASSWORD);
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	0e 94 17 12 	call	0x242e	; 0x242e <UART_sendByte>
     ff8:	03 c0       	rjmp	.+6      	; 0x1000 <receivePassword+0x58>
			}
			else counter++;
     ffa:	88 89       	ldd	r24, Y+16	; 0x10
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter=0;
	uint8 i;
	/* Receive the 2 passwords */
		UART_receiveString (g_passwordControlEcu);
		UART_receiveString (g_passwordConfirmControlEcu);
		for(i=0;i<5;i++){
    1000:	8f 85       	ldd	r24, Y+15	; 0x0f
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	8f 87       	std	Y+15, r24	; 0x0f
    1006:	8f 85       	ldd	r24, Y+15	; 0x0f
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	18 f3       	brcs	.-58     	; 0xfd2 <receivePassword+0x2a>
				//g_matchingFlag=0;
				UART_sendByte (WRONG_PASSWORD);
			}
			else counter++;
		}
		if(counter==5){
    100c:	88 89       	ldd	r24, Y+16	; 0x10
    100e:	85 30       	cpi	r24, 0x05	; 5
    1010:	09 f0       	breq	.+2      	; 0x1014 <receivePassword+0x6c>
    1012:	8f c0       	rjmp	.+286    	; 0x1132 <receivePassword+0x18a>
			UART_sendByte(CORRECT_PASSWORD);                                         /* Send confirm byte */
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	0e 94 17 12 	call	0x242e	; 0x242e <UART_sendByte>
			g_matchingFlag = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	80 93 80 01 	sts	0x0180, r24
			for( i = 0; i < 5; i++){
    1020:	1f 86       	std	Y+15, r1	; 0x0f
    1022:	83 c0       	rjmp	.+262    	; 0x112a <receivePassword+0x182>
			     EEPROM_writeByte ((uint16)(EEPROM_ADDRESS + i), g_passwordControlEcu[i]);  /* Save password in EEPROM */
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	48 2f       	mov	r20, r24
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	8f 85       	ldd	r24, Y+15	; 0x0f
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	fc 01       	movw	r30, r24
    1032:	ec 56       	subi	r30, 0x6C	; 108
    1034:	fe 4f       	sbci	r31, 0xFE	; 254
    1036:	20 81       	ld	r18, Z
    1038:	ca 01       	movw	r24, r20
    103a:	62 2f       	mov	r22, r18
    103c:	0e 94 5f 0a 	call	0x14be	; 0x14be <EEPROM_writeByte>
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e2       	ldi	r26, 0x20	; 32
    1046:	b1 e4       	ldi	r27, 0x41	; 65
    1048:	8b 87       	std	Y+11, r24	; 0x0b
    104a:	9c 87       	std	Y+12, r25	; 0x0c
    104c:	ad 87       	std	Y+13, r26	; 0x0d
    104e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1050:	6b 85       	ldd	r22, Y+11	; 0x0b
    1052:	7c 85       	ldd	r23, Y+12	; 0x0c
    1054:	8d 85       	ldd	r24, Y+13	; 0x0d
    1056:	9e 85       	ldd	r25, Y+14	; 0x0e
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	4a ef       	ldi	r20, 0xFA	; 250
    105e:	54 e4       	ldi	r21, 0x44	; 68
    1060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	8f 83       	std	Y+7, r24	; 0x07
    106a:	98 87       	std	Y+8, r25	; 0x08
    106c:	a9 87       	std	Y+9, r26	; 0x09
    106e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1070:	6f 81       	ldd	r22, Y+7	; 0x07
    1072:	78 85       	ldd	r23, Y+8	; 0x08
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e8       	ldi	r20, 0x80	; 128
    107e:	5f e3       	ldi	r21, 0x3F	; 63
    1080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1084:	88 23       	and	r24, r24
    1086:	2c f4       	brge	.+10     	; 0x1092 <receivePassword+0xea>
		__ticks = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	3f c0       	rjmp	.+126    	; 0x1110 <receivePassword+0x168>
	else if (__tmp > 65535)
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	3f ef       	ldi	r19, 0xFF	; 255
    109e:	4f e7       	ldi	r20, 0x7F	; 127
    10a0:	57 e4       	ldi	r21, 0x47	; 71
    10a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10a6:	18 16       	cp	r1, r24
    10a8:	4c f5       	brge	.+82     	; 0x10fc <receivePassword+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e2       	ldi	r20, 0x20	; 32
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	0f c0       	rjmp	.+30     	; 0x10f2 <receivePassword+0x14a>
    10d4:	88 ec       	ldi	r24, 0xC8	; 200
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <receivePassword+0x138>
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	69 f7       	brne	.-38     	; 0x10d4 <receivePassword+0x12c>
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <receivePassword+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <receivePassword+0x174>
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
			else counter++;
		}
		if(counter==5){
			UART_sendByte(CORRECT_PASSWORD);                                         /* Send confirm byte */
			g_matchingFlag = 1;
			for( i = 0; i < 5; i++){
    1124:	8f 85       	ldd	r24, Y+15	; 0x0f
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	8f 87       	std	Y+15, r24	; 0x0f
    112a:	8f 85       	ldd	r24, Y+15	; 0x0f
    112c:	85 30       	cpi	r24, 0x05	; 5
    112e:	08 f4       	brcc	.+2      	; 0x1132 <receivePassword+0x18a>
    1130:	79 cf       	rjmp	.-270    	; 0x1024 <receivePassword+0x7c>
			     EEPROM_writeByte ((uint16)(EEPROM_ADDRESS + i), g_passwordControlEcu[i]);  /* Save password in EEPROM */
				 _delay_ms (10);
			}
		}
}
    1132:	60 96       	adiw	r28, 0x10	; 16
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <getDefinedPassword>:
 * 4. If not matched, send repeat byte to HMI_ECU to ask for password 2 more times.
 * 5. If matched in the 2 next iterations take the action.
 * 6. If not matched in the 3 iterations, send wrong byte to HMI_ECU and start the buzzer.
 */
void getDefinedPassword (void)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	61 97       	sbiw	r28, 0x11	; 17
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
    1158:	19 8a       	std	Y+17, r1	; 0x11
	uint8 counter = 0;
    115a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 recieved = 0;
    115c:	1f 86       	std	Y+15, r1	; 0x0f
	static uint8 wrongIterations = 0; /* For counting the wrong pass */

	UART_receiveString (g_definedPassword);								  /* Receive the user input pass */
    115e:	86 e8       	ldi	r24, 0x86	; 134
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 66 12 	call	0x24cc	; 0x24cc <UART_receiveString>

	/* Receive the pass stored in EEPROM */
	for (i = 0; i < 5; i++)
    1166:	19 8a       	std	Y+17, r1	; 0x11
    1168:	82 c0       	rjmp	.+260    	; 0x126e <getDefinedPassword+0x12a>
	{
		EEPROM_readByte ((uint16)(EEPROM_ADDRESS + i), g_passwordConfirmControlEcu + i);
    116a:	89 89       	ldd	r24, Y+17	; 0x11
    116c:	48 2f       	mov	r20, r24
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	89 89       	ldd	r24, Y+17	; 0x11
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9c 01       	movw	r18, r24
    1178:	23 57       	subi	r18, 0x73	; 115
    117a:	3e 4f       	sbci	r19, 0xFE	; 254
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	0e 94 a0 0a 	call	0x1540	; 0x1540 <EEPROM_readByte>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e2       	ldi	r26, 0x20	; 32
    118a:	b1 e4       	ldi	r27, 0x41	; 65
    118c:	8b 87       	std	Y+11, r24	; 0x0b
    118e:	9c 87       	std	Y+12, r25	; 0x0c
    1190:	ad 87       	std	Y+13, r26	; 0x0d
    1192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1194:	6b 85       	ldd	r22, Y+11	; 0x0b
    1196:	7c 85       	ldd	r23, Y+12	; 0x0c
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a ef       	ldi	r20, 0xFA	; 250
    11a2:	54 e4       	ldi	r21, 0x44	; 68
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8f 83       	std	Y+7, r24	; 0x07
    11ae:	98 87       	std	Y+8, r25	; 0x08
    11b0:	a9 87       	std	Y+9, r26	; 0x09
    11b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b4:	6f 81       	ldd	r22, Y+7	; 0x07
    11b6:	78 85       	ldd	r23, Y+8	; 0x08
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <getDefinedPassword+0x92>
		__ticks = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <getDefinedPassword+0x110>
	else if (__tmp > 65535)
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 e4       	ldi	r21, 0x47	; 71
    11e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	4c f5       	brge	.+82     	; 0x1240 <getDefinedPassword+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <getDefinedPassword+0xf2>
    1218:	88 ec       	ldi	r24, 0xC8	; 200
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9c 83       	std	Y+4, r25	; 0x04
    121e:	8b 83       	std	Y+3, r24	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <getDefinedPassword+0xe0>
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	69 f7       	brne	.-38     	; 0x1218 <getDefinedPassword+0xd4>
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <getDefinedPassword+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1240:	6f 81       	ldd	r22, Y+7	; 0x07
    1242:	78 85       	ldd	r23, Y+8	; 0x08
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	9e 81       	ldd	r25, Y+6	; 0x06
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <getDefinedPassword+0x11c>
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
	static uint8 wrongIterations = 0; /* For counting the wrong pass */

	UART_receiveString (g_definedPassword);								  /* Receive the user input pass */

	/* Receive the pass stored in EEPROM */
	for (i = 0; i < 5; i++)
    1268:	89 89       	ldd	r24, Y+17	; 0x11
    126a:	8f 5f       	subi	r24, 0xFF	; 255
    126c:	89 8b       	std	Y+17, r24	; 0x11
    126e:	89 89       	ldd	r24, Y+17	; 0x11
    1270:	85 30       	cpi	r24, 0x05	; 5
    1272:	08 f4       	brcc	.+2      	; 0x1276 <getDefinedPassword+0x132>
    1274:	7a cf       	rjmp	.-268    	; 0x116a <getDefinedPassword+0x26>
	{
		EEPROM_readByte ((uint16)(EEPROM_ADDRESS + i), g_passwordConfirmControlEcu + i);
		_delay_ms (10);
	}
	g_passwordConfirmControlEcu[i] = '\0';
    1276:	89 89       	ldd	r24, Y+17	; 0x11
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	fc 01       	movw	r30, r24
    127e:	e3 57       	subi	r30, 0x73	; 115
    1280:	fe 4f       	sbci	r31, 0xFE	; 254
    1282:	10 82       	st	Z, r1

	/* Start comparing the 2 passwords */
	i = 0;
    1284:	19 8a       	std	Y+17, r1	; 0x11
    1286:	16 c0       	rjmp	.+44     	; 0x12b4 <getDefinedPassword+0x170>
	while ((g_definedPassword[i] != '\0') && (g_passwordConfirmControlEcu[i] != '\0'))
	{
		if (g_definedPassword[i] != g_passwordConfirmControlEcu[i])
    1288:	89 89       	ldd	r24, Y+17	; 0x11
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	fc 01       	movw	r30, r24
    1290:	ea 57       	subi	r30, 0x7A	; 122
    1292:	fe 4f       	sbci	r31, 0xFE	; 254
    1294:	20 81       	ld	r18, Z
    1296:	89 89       	ldd	r24, Y+17	; 0x11
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	e3 57       	subi	r30, 0x73	; 115
    12a0:	fe 4f       	sbci	r31, 0xFE	; 254
    12a2:	80 81       	ld	r24, Z
    12a4:	28 17       	cp	r18, r24
    12a6:	c1 f4       	brne	.+48     	; 0x12d8 <getDefinedPassword+0x194>
		{
			break;
		}
		i++;
    12a8:	89 89       	ldd	r24, Y+17	; 0x11
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	89 8b       	std	Y+17, r24	; 0x11
		counter++;
    12ae:	88 89       	ldd	r24, Y+16	; 0x10
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	88 8b       	std	Y+16, r24	; 0x10
	}
	g_passwordConfirmControlEcu[i] = '\0';

	/* Start comparing the 2 passwords */
	i = 0;
	while ((g_definedPassword[i] != '\0') && (g_passwordConfirmControlEcu[i] != '\0'))
    12b4:	89 89       	ldd	r24, Y+17	; 0x11
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	fc 01       	movw	r30, r24
    12bc:	ea 57       	subi	r30, 0x7A	; 122
    12be:	fe 4f       	sbci	r31, 0xFE	; 254
    12c0:	80 81       	ld	r24, Z
    12c2:	88 23       	and	r24, r24
    12c4:	49 f0       	breq	.+18     	; 0x12d8 <getDefinedPassword+0x194>
    12c6:	89 89       	ldd	r24, Y+17	; 0x11
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	fc 01       	movw	r30, r24
    12ce:	e3 57       	subi	r30, 0x73	; 115
    12d0:	fe 4f       	sbci	r31, 0xFE	; 254
    12d2:	80 81       	ld	r24, Z
    12d4:	88 23       	and	r24, r24
    12d6:	c1 f6       	brne	.-80     	; 0x1288 <getDefinedPassword+0x144>
			break;
		}
		i++;
		counter++;
	}
	if (counter == 5)
    12d8:	88 89       	ldd	r24, Y+16	; 0x10
    12da:	85 30       	cpi	r24, 0x05	; 5
    12dc:	f1 f4       	brne	.+60     	; 0x131a <getDefinedPassword+0x1d6>
	{
		UART_sendByte (CORRECT_PASSWORD);/* Send confirm byte */
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0e 94 17 12 	call	0x242e	; 0x242e <UART_sendByte>
		recieved = UART_recieveByte ();/* Receive the user choice */
    12e4:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_recieveByte>
    12e8:	8f 87       	std	Y+15, r24	; 0x0f
		wrongIterations = 0; /*3shan a-count 3la nedef lma y7sal moshkela(wrong iteration count) b3d kda*/
    12ea:	10 92 83 01 	sts	0x0183, r1
		if (recieved == '+')/* If open the door */
    12ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f0:	8b 32       	cpi	r24, 0x2B	; 43
    12f2:	69 f4       	brne	.+26     	; 0x130e <getDefinedPassword+0x1ca>
		{
			DcMotor_Rotate(CW, 150);/* Start rotating the motor CW */
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	66 e9       	ldi	r22, 0x96	; 150
    12f8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
			Timer1_setCallBack (timerCallBack_15Sec);
    12fc:	82 e7       	ldi	r24, 0x72	; 114
    12fe:	97 e0       	ldi	r25, 0x07	; 7
    1300:	0e 94 d7 10 	call	0x21ae	; 0x21ae <Timer1_setCallBack>
			Timer1_init (&s_timerConfigurations_15Sec);/* Rotate for 15 seconds */
    1304:	88 e6       	ldi	r24, 0x68	; 104
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 57 10 	call	0x20ae	; 0x20ae <Timer1_init>
    130c:	22 c0       	rjmp	.+68     	; 0x1352 <getDefinedPassword+0x20e>
		}
		else if (recieved == '-') /* If change pass */
    130e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1310:	8d 32       	cpi	r24, 0x2D	; 45
    1312:	f9 f4       	brne	.+62     	; 0x1352 <getDefinedPassword+0x20e>
		{
			g_matchingFlag = 0;/* to call recieveCheckNewPassword */
    1314:	10 92 80 01 	sts	0x0180, r1
    1318:	1c c0       	rjmp	.+56     	; 0x1352 <getDefinedPassword+0x20e>
		}
	}
	else
	{
		wrongIterations++;													  /* Increment wrong iterations */
    131a:	80 91 83 01 	lds	r24, 0x0183
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	80 93 83 01 	sts	0x0183, r24
		if (wrongIterations == 3)	/*(third consecutive time)*/
    1324:	80 91 83 01 	lds	r24, 0x0183
    1328:	83 30       	cpi	r24, 0x03	; 3
    132a:	81 f4       	brne	.+32     	; 0x134c <getDefinedPassword+0x208>
		{
			UART_sendByte(WRONG_PASSWORD);										  /* Send wrong byte */
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	0e 94 17 12 	call	0x242e	; 0x242e <UART_sendByte>
			Buzzer_on();													  /* Start the buzzer */
    1332:	0e 94 c3 09 	call	0x1386	; 0x1386 <Buzzer_on>
			Timer1_setCallBack (timerCallBack_60Sec);
    1336:	8e eb       	ldi	r24, 0xBE	; 190
    1338:	97 e0       	ldi	r25, 0x07	; 7
    133a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <Timer1_setCallBack>
			Timer1_init (&s_timerConfigurations_60Sec);						  /* Start counting 60 seconds */
    133e:	84 e7       	ldi	r24, 0x74	; 116
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 57 10 	call	0x20ae	; 0x20ae <Timer1_init>
			wrongIterations = 0;											  /* Restart the wrong iterations again */
    1346:	10 92 83 01 	sts	0x0183, r1
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <getDefinedPassword+0x20e>
		}
		else
		{
			UART_sendByte(REPEAT_BYTE);									  /* If less than 3 send repeat */
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	0e 94 17 12 	call	0x242e	; 0x242e <UART_sendByte>
		}
	}
}
    1352:	61 96       	adiw	r28, 0x11	; 17
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <Buzzer_init>:
/*
● Description
⮚ Setup the direction for the buzzer pin as output pin through the GPIO driver.
⮚ Turn off the buzzer through the GPIO.
*/
void Buzzer_init(void){
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection( BUZZER_PORT,  BUZZER_PIN,  PIN_OUTPUT);
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	66 e0       	ldi	r22, 0x06	; 6
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	0e 94 00 0b 	call	0x1600	; 0x1600 <GPIO_setupPinDirection>
	GPIO_writePin( BUZZER_PORT, BUZZER_PIN , LOGIC_LOW);
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	66 e0       	ldi	r22, 0x06	; 6
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <Buzzer_on>:
/*
● Description
⮚ Function to enable the Buzzer through the GPIO
*/
void Buzzer_on(void){
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( BUZZER_PORT, BUZZER_PIN , LOGIC_HIGH);
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	66 e0       	ldi	r22, 0x06	; 6
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
}
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <Buzzer_off>:
/*
● Description
⮚ Function to disable the Buzzer through the GPIO.
*/
void Buzzer_off(void){
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin( BUZZER_PORT, BUZZER_PIN , LOGIC_LOW);
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	66 e0       	ldi	r22, 0x06	; 6
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <DcMotor_Rotate>:
➢ The function responsible for rotate the DC Motor CW/ or A-CW or
stop the motor based on the state input state value.
➢ Send the required duty cycle to the PWM driver based on the
required speed value.
*/
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DcMotor_Rotate+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <DcMotor_Rotate+0x8>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	6b 83       	std	Y+3, r22	; 0x03
	    uint8 dutyCycle = 0;
    13c8:	19 82       	std	Y+1, r1	; 0x01

		/* Set the out put of the two motor pins to change its rotation direction depending on the input */

		  switch(state)
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3d 83       	std	Y+5, r19	; 0x05
    13d2:	2c 83       	std	Y+4, r18	; 0x04
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	01 f1       	breq	.+64     	; 0x141e <DcMotor_Rotate+0x68>
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	29 f0       	breq	.+10     	; 0x13f2 <DcMotor_Rotate+0x3c>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	61 f0       	breq	.+24     	; 0x1408 <DcMotor_Rotate+0x52>
    13f0:	20 c0       	rjmp	.+64     	; 0x1432 <DcMotor_Rotate+0x7c>
		  {
		  case stop :
			  GPIO_writePin(DC_PORT_ID ,DC_MOTOR_FIRST_PIN_ID , LOGIC_LOW);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
			  GPIO_writePin(DC_PORT_ID ,DC_MOTOR_SECOND_PIN_ID , LOGIC_LOW);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	61 e0       	ldi	r22, 0x01	; 1
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
    1406:	15 c0       	rjmp	.+42     	; 0x1432 <DcMotor_Rotate+0x7c>
			  break;
		  case CW :
		  	  GPIO_writePin(DC_PORT_ID ,DC_MOTOR_FIRST_PIN_ID , LOGIC_HIGH);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
		  	  GPIO_writePin(DC_PORT_ID ,DC_MOTOR_SECOND_PIN_ID , LOGIC_LOW);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
    141c:	0a c0       	rjmp	.+20     	; 0x1432 <DcMotor_Rotate+0x7c>
		  	  break;
		  case A_CW :
		  	  GPIO_writePin(DC_PORT_ID ,DC_MOTOR_FIRST_PIN_ID , LOGIC_LOW);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
		  	  GPIO_writePin(DC_PORT_ID ,DC_MOTOR_SECOND_PIN_ID , LOGIC_HIGH);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <GPIO_writePin>
//		/* 100% duty cycle */
//		  case 100 :
//			  PWM_Timer0_Start(255);
//			  break;
//		  }
			dutyCycle = (uint8)(((float32)speed / DC_MAX_SPEED) * 100);
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a0 e0       	ldi	r26, 0x00	; 0
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	bc 01       	movw	r22, r24
    144a:	cd 01       	movw	r24, r26
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	48 ec       	ldi	r20, 0xC8	; 200
    1452:	52 e4       	ldi	r21, 0x42	; 66
    1454:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	48 ec       	ldi	r20, 0xC8	; 200
    1466:	52 e4       	ldi	r21, 0x42	; 66
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	89 83       	std	Y+1, r24	; 0x01
			PWM_Timer0_Start(dutyCycle);
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <PWM_Timer0_Start>
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <DcMotor_Init>:
/*Description
➢ The Function responsible for setup the direction for the two
motor pins through the GPIO driver.
➢ Stop at the DC-Motor at the beginning through the GPIO driver.
*/
void DcMotor_Init(void){
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62

	/* Set the two motor pins as output pins */
	 GPIO_setupPinDirection(DC_PORT_ID, DC_MOTOR_FIRST_PIN_ID,  PIN_OUTPUT);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	0e 94 00 0b 	call	0x1600	; 0x1600 <GPIO_setupPinDirection>
	 GPIO_setupPinDirection(DC_PORT_ID,  DC_MOTOR_SECOND_PIN_ID,  PIN_OUTPUT);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	61 e0       	ldi	r22, 0x01	; 1
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 00 0b 	call	0x1600	; 0x1600 <GPIO_setupPinDirection>

	DcMotor_Rotate(stop,0);
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DcMotor_Rotate>
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <EEPROM_writeByte+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <EEPROM_writeByte+0x8>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14d0:	0e 94 2a 11 	call	0x2254	; 0x2254 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14d4:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	11 f0       	breq	.+4      	; 0x14e0 <EEPROM_writeByte+0x22>
        return ERROR;
    14dc:	1c 82       	std	Y+4, r1	; 0x04
    14de:	28 c0       	rjmp	.+80     	; 0x1530 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	80 70       	andi	r24, 0x00	; 0
    14e6:	97 70       	andi	r25, 0x07	; 7
    14e8:	88 0f       	add	r24, r24
    14ea:	89 2f       	mov	r24, r25
    14ec:	88 1f       	adc	r24, r24
    14ee:	99 0b       	sbc	r25, r25
    14f0:	91 95       	neg	r25
    14f2:	80 6a       	ori	r24, 0xA0	; 160
    14f4:	0e 94 45 11 	call	0x228a	; 0x228a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14f8:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    14fc:	88 31       	cpi	r24, 0x18	; 24
    14fe:	11 f0       	breq	.+4      	; 0x1504 <EEPROM_writeByte+0x46>
        return ERROR;
    1500:	1c 82       	std	Y+4, r1	; 0x04
    1502:	16 c0       	rjmp	.+44     	; 0x1530 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	0e 94 45 11 	call	0x228a	; 0x228a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    150a:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    150e:	88 32       	cpi	r24, 0x28	; 40
    1510:	11 f0       	breq	.+4      	; 0x1516 <EEPROM_writeByte+0x58>
        return ERROR;
    1512:	1c 82       	std	Y+4, r1	; 0x04
    1514:	0d c0       	rjmp	.+26     	; 0x1530 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	0e 94 45 11 	call	0x228a	; 0x228a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    151c:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    1520:	88 32       	cpi	r24, 0x28	; 40
    1522:	11 f0       	breq	.+4      	; 0x1528 <EEPROM_writeByte+0x6a>
        return ERROR;
    1524:	1c 82       	std	Y+4, r1	; 0x04
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1528:	0e 94 3a 11 	call	0x2274	; 0x2274 <TWI_stop>

    return SUCCESS;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	8c 83       	std	Y+4, r24	; 0x04
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <EEPROM_readByte+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <EEPROM_readByte+0x8>
    1548:	0f 92       	push	r0
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	7c 83       	std	Y+4, r23	; 0x04
    1554:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1556:	0e 94 2a 11 	call	0x2254	; 0x2254 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    155a:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	11 f0       	breq	.+4      	; 0x1566 <EEPROM_readByte+0x26>
        return ERROR;
    1562:	1d 82       	std	Y+5, r1	; 0x05
    1564:	44 c0       	rjmp	.+136    	; 0x15ee <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	80 70       	andi	r24, 0x00	; 0
    156c:	97 70       	andi	r25, 0x07	; 7
    156e:	88 0f       	add	r24, r24
    1570:	89 2f       	mov	r24, r25
    1572:	88 1f       	adc	r24, r24
    1574:	99 0b       	sbc	r25, r25
    1576:	91 95       	neg	r25
    1578:	80 6a       	ori	r24, 0xA0	; 160
    157a:	0e 94 45 11 	call	0x228a	; 0x228a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    157e:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    1582:	88 31       	cpi	r24, 0x18	; 24
    1584:	11 f0       	breq	.+4      	; 0x158a <EEPROM_readByte+0x4a>
        return ERROR;
    1586:	1d 82       	std	Y+5, r1	; 0x05
    1588:	32 c0       	rjmp	.+100    	; 0x15ee <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	0e 94 45 11 	call	0x228a	; 0x228a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1590:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    1594:	88 32       	cpi	r24, 0x28	; 40
    1596:	11 f0       	breq	.+4      	; 0x159c <EEPROM_readByte+0x5c>
        return ERROR;
    1598:	1d 82       	std	Y+5, r1	; 0x05
    159a:	29 c0       	rjmp	.+82     	; 0x15ee <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    159c:	0e 94 2a 11 	call	0x2254	; 0x2254 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15a0:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    15a4:	80 31       	cpi	r24, 0x10	; 16
    15a6:	11 f0       	breq	.+4      	; 0x15ac <EEPROM_readByte+0x6c>
        return ERROR;
    15a8:	1d 82       	std	Y+5, r1	; 0x05
    15aa:	21 c0       	rjmp	.+66     	; 0x15ee <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	80 70       	andi	r24, 0x00	; 0
    15b2:	97 70       	andi	r25, 0x07	; 7
    15b4:	88 0f       	add	r24, r24
    15b6:	89 2f       	mov	r24, r25
    15b8:	88 1f       	adc	r24, r24
    15ba:	99 0b       	sbc	r25, r25
    15bc:	91 95       	neg	r25
    15be:	81 6a       	ori	r24, 0xA1	; 161
    15c0:	0e 94 45 11 	call	0x228a	; 0x228a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    15c4:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    15c8:	80 34       	cpi	r24, 0x40	; 64
    15ca:	11 f0       	breq	.+4      	; 0x15d0 <EEPROM_readByte+0x90>
        return ERROR;
    15cc:	1d 82       	std	Y+5, r1	; 0x05
    15ce:	0f c0       	rjmp	.+30     	; 0x15ee <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    15d0:	0e 94 6f 11 	call	0x22de	; 0x22de <TWI_readByteWithNACK>
    15d4:	eb 81       	ldd	r30, Y+3	; 0x03
    15d6:	fc 81       	ldd	r31, Y+4	; 0x04
    15d8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    15da:	0e 94 82 11 	call	0x2304	; 0x2304 <TWI_getStatus>
    15de:	88 35       	cpi	r24, 0x58	; 88
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <EEPROM_readByte+0xa6>
        return ERROR;
    15e2:	1d 82       	std	Y+5, r1	; 0x05
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    15e6:	0e 94 3a 11 	call	0x2274	; 0x2274 <TWI_stop>

    return SUCCESS;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_setupPinDirection+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <GPIO_setupPinDirection+0x8>
    1608:	0f 92       	push	r0
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	6a 83       	std	Y+2, r22	; 0x02
    1612:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	88 30       	cpi	r24, 0x08	; 8
    1618:	08 f0       	brcs	.+2      	; 0x161c <GPIO_setupPinDirection+0x1c>
    161a:	d5 c0       	rjmp	.+426    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	08 f0       	brcs	.+2      	; 0x1624 <GPIO_setupPinDirection+0x24>
    1622:	d1 c0       	rjmp	.+418    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
		 *  */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3d 83       	std	Y+5, r19	; 0x05
    162c:	2c 83       	std	Y+4, r18	; 0x04
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	9d 81       	ldd	r25, Y+5	; 0x05
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	91 05       	cpc	r25, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <GPIO_setupPinDirection+0x3a>
    1638:	43 c0       	rjmp	.+134    	; 0x16c0 <GPIO_setupPinDirection+0xc0>
    163a:	2c 81       	ldd	r18, Y+4	; 0x04
    163c:	3d 81       	ldd	r19, Y+5	; 0x05
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	2c f4       	brge	.+10     	; 0x164e <GPIO_setupPinDirection+0x4e>
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	71 f0       	breq	.+28     	; 0x1668 <GPIO_setupPinDirection+0x68>
    164c:	bc c0       	rjmp	.+376    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
    164e:	2c 81       	ldd	r18, Y+4	; 0x04
    1650:	3d 81       	ldd	r19, Y+5	; 0x05
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <GPIO_setupPinDirection+0x5a>
    1658:	5f c0       	rjmp	.+190    	; 0x1718 <GPIO_setupPinDirection+0x118>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <GPIO_setupPinDirection+0x66>
    1664:	85 c0       	rjmp	.+266    	; 0x1770 <GPIO_setupPinDirection+0x170>
    1666:	af c0       	rjmp	.+350    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	a1 f4       	brne	.+40     	; 0x1696 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    166e:	aa e3       	ldi	r26, 0x3A	; 58
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ea e3       	ldi	r30, 0x3A	; 58
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <GPIO_setupPinDirection+0x8c>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <GPIO_setupPinDirection+0x88>
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	98 c0       	rjmp	.+304    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1696:	aa e3       	ldi	r26, 0x3A	; 58
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ea e3       	ldi	r30, 0x3A	; 58
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <GPIO_setupPinDirection+0xb4>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <GPIO_setupPinDirection+0xb0>
    16b8:	80 95       	com	r24
    16ba:	84 23       	and	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	83 c0       	rjmp	.+262    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	a1 f4       	brne	.+40     	; 0x16ee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16c6:	a7 e3       	ldi	r26, 0x37	; 55
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e7 e3       	ldi	r30, 0x37	; 55
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <GPIO_setupPinDirection+0xe4>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <GPIO_setupPinDirection+0xe0>
    16e8:	84 2b       	or	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	6c c0       	rjmp	.+216    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16ee:	a7 e3       	ldi	r26, 0x37	; 55
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e7 e3       	ldi	r30, 0x37	; 55
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <GPIO_setupPinDirection+0x10c>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <GPIO_setupPinDirection+0x108>
    1710:	80 95       	com	r24
    1712:	84 23       	and	r24, r20
    1714:	8c 93       	st	X, r24
    1716:	57 c0       	rjmp	.+174    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	a1 f4       	brne	.+40     	; 0x1746 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    171e:	a4 e3       	ldi	r26, 0x34	; 52
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e4 e3       	ldi	r30, 0x34	; 52
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <GPIO_setupPinDirection+0x13c>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <GPIO_setupPinDirection+0x138>
    1740:	84 2b       	or	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	40 c0       	rjmp	.+128    	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1746:	a4 e3       	ldi	r26, 0x34	; 52
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e4 e3       	ldi	r30, 0x34	; 52
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <GPIO_setupPinDirection+0x164>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <GPIO_setupPinDirection+0x160>
    1768:	80 95       	com	r24
    176a:	84 23       	and	r24, r20
    176c:	8c 93       	st	X, r24
    176e:	2b c0       	rjmp	.+86     	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	a1 f4       	brne	.+40     	; 0x179e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1776:	a1 e3       	ldi	r26, 0x31	; 49
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e1 e3       	ldi	r30, 0x31	; 49
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <GPIO_setupPinDirection+0x194>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <GPIO_setupPinDirection+0x190>
    1798:	84 2b       	or	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    179e:	a1 e3       	ldi	r26, 0x31	; 49
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e1 e3       	ldi	r30, 0x31	; 49
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <GPIO_setupPinDirection+0x1bc>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <GPIO_setupPinDirection+0x1b8>
    17c0:	80 95       	com	r24
    17c2:	84 23       	and	r24, r20
    17c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <GPIO_writePin+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <GPIO_writePin+0x8>
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	6a 83       	std	Y+2, r22	; 0x02
    17e8:	4b 83       	std	Y+3, r20	; 0x03
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	88 30       	cpi	r24, 0x08	; 8
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <GPIO_writePin+0x1c>
    17f0:	21 c2       	rjmp	.+1090   	; 0x1c34 <GPIO_writePin+0x45e>
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <GPIO_writePin+0x24>
    17f8:	1d c2       	rjmp	.+1082   	; 0x1c34 <GPIO_writePin+0x45e>
	{
		/* Do Nothing */
	}
	else{
         switch(port_num){
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	3d 83       	std	Y+5, r19	; 0x05
    1802:	2c 83       	std	Y+4, r18	; 0x04
    1804:	4c 81       	ldd	r20, Y+4	; 0x04
    1806:	5d 81       	ldd	r21, Y+5	; 0x05
    1808:	41 30       	cpi	r20, 0x01	; 1
    180a:	51 05       	cpc	r21, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <GPIO_writePin+0x3a>
    180e:	97 c0       	rjmp	.+302    	; 0x193e <GPIO_writePin+0x168>
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	9d 81       	ldd	r25, Y+5	; 0x05
    1814:	82 30       	cpi	r24, 0x02	; 2
    1816:	91 05       	cpc	r25, r1
    1818:	34 f4       	brge	.+12     	; 0x1826 <GPIO_writePin+0x50>
    181a:	2c 81       	ldd	r18, Y+4	; 0x04
    181c:	3d 81       	ldd	r19, Y+5	; 0x05
    181e:	21 15       	cp	r18, r1
    1820:	31 05       	cpc	r19, r1
    1822:	71 f0       	breq	.+28     	; 0x1840 <GPIO_writePin+0x6a>
    1824:	07 c2       	rjmp	.+1038   	; 0x1c34 <GPIO_writePin+0x45e>
    1826:	4c 81       	ldd	r20, Y+4	; 0x04
    1828:	5d 81       	ldd	r21, Y+5	; 0x05
    182a:	42 30       	cpi	r20, 0x02	; 2
    182c:	51 05       	cpc	r21, r1
    182e:	09 f4       	brne	.+2      	; 0x1832 <GPIO_writePin+0x5c>
    1830:	05 c1       	rjmp	.+522    	; 0x1a3c <GPIO_writePin+0x266>
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	9d 81       	ldd	r25, Y+5	; 0x05
    1836:	83 30       	cpi	r24, 0x03	; 3
    1838:	91 05       	cpc	r25, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <GPIO_writePin+0x68>
    183c:	7e c1       	rjmp	.+764    	; 0x1b3a <GPIO_writePin+0x364>
    183e:	fa c1       	rjmp	.+1012   	; 0x1c34 <GPIO_writePin+0x45e>
        case PORTA_ID:
            if(!(DDRA&(1<<pin_num))){
    1840:	ea e3       	ldi	r30, 0x3A	; 58
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <GPIO_writePin+0x82>
    1854:	55 95       	asr	r21
    1856:	47 95       	ror	r20
    1858:	8a 95       	dec	r24
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <GPIO_writePin+0x7e>
    185c:	ca 01       	movw	r24, r20
    185e:	81 70       	andi	r24, 0x01	; 1
    1860:	90 70       	andi	r25, 0x00	; 0
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	61 f5       	brne	.+88     	; 0x18be <GPIO_writePin+0xe8>
            	if(value==LOGIC_HIGH){
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	a1 f4       	brne	.+40     	; 0x1894 <GPIO_writePin+0xbe>
            	       SET_BIT(PORTA,pin_num);
    186c:	ab e3       	ldi	r26, 0x3B	; 59
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	eb e3       	ldi	r30, 0x3B	; 59
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <GPIO_writePin+0xb4>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <GPIO_writePin+0xb0>
    188e:	84 2b       	or	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	d0 c1       	rjmp	.+928    	; 0x1c34 <GPIO_writePin+0x45e>
            	   }
            	else{
            	     CLEAR_BIT(PORTA,pin_num);
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_writePin+0xdc>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_writePin+0xd8>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	bb c1       	rjmp	.+886    	; 0x1c34 <GPIO_writePin+0x45e>
            	  }
            }
            else if((DDRA&(1<<pin_num))){
    18be:	ea e3       	ldi	r30, 0x3A	; 58
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a9 01       	movw	r20, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <GPIO_writePin+0x100>
    18d2:	55 95       	asr	r21
    18d4:	47 95       	ror	r20
    18d6:	8a 95       	dec	r24
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <GPIO_writePin+0xfc>
    18da:	ca 01       	movw	r24, r20
    18dc:	81 70       	andi	r24, 0x01	; 1
    18de:	90 70       	andi	r25, 0x00	; 0
    18e0:	88 23       	and	r24, r24
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <GPIO_writePin+0x110>
    18e4:	a7 c1       	rjmp	.+846    	; 0x1c34 <GPIO_writePin+0x45e>

            	if(value==LOGIC_HIGH){
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	a1 f4       	brne	.+40     	; 0x1914 <GPIO_writePin+0x13e>
            	      SET_BIT(PORTA,pin_num);
    18ec:	ab e3       	ldi	r26, 0x3B	; 59
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	eb e3       	ldi	r30, 0x3B	; 59
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_writePin+0x134>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_writePin+0x130>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	90 c1       	rjmp	.+800    	; 0x1c34 <GPIO_writePin+0x45e>
            	   }
            	else{
            	    CLEAR_BIT(PORTA,pin_num);
    1914:	ab e3       	ldi	r26, 0x3B	; 59
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	eb e3       	ldi	r30, 0x3B	; 59
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_writePin+0x15c>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_writePin+0x158>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	7b c1       	rjmp	.+758    	; 0x1c34 <GPIO_writePin+0x45e>
             }
            }
            break;
        case PORTB_ID:
        	if(!(DDRB&(1<<pin_num))){
    193e:	e7 e3       	ldi	r30, 0x37	; 55
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_writePin+0x180>
    1952:	55 95       	asr	r21
    1954:	47 95       	ror	r20
    1956:	8a 95       	dec	r24
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_writePin+0x17c>
    195a:	ca 01       	movw	r24, r20
    195c:	81 70       	andi	r24, 0x01	; 1
    195e:	90 70       	andi	r25, 0x00	; 0
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	61 f5       	brne	.+88     	; 0x19bc <GPIO_writePin+0x1e6>
        	            	if(value==LOGIC_HIGH){
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	a1 f4       	brne	.+40     	; 0x1992 <GPIO_writePin+0x1bc>
        	            	       SET_BIT(PORTB,pin_num);
    196a:	a8 e3       	ldi	r26, 0x38	; 56
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e8 e3       	ldi	r30, 0x38	; 56
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <GPIO_writePin+0x1b2>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <GPIO_writePin+0x1ae>
    198c:	84 2b       	or	r24, r20
    198e:	8c 93       	st	X, r24
    1990:	51 c1       	rjmp	.+674    	; 0x1c34 <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTB,pin_num);
    1992:	a8 e3       	ldi	r26, 0x38	; 56
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e8 e3       	ldi	r30, 0x38	; 56
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <GPIO_writePin+0x1da>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <GPIO_writePin+0x1d6>
    19b4:	80 95       	com	r24
    19b6:	84 23       	and	r24, r20
    19b8:	8c 93       	st	X, r24
    19ba:	3c c1       	rjmp	.+632    	; 0x1c34 <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRB&(1<<pin_num))){
    19bc:	e7 e3       	ldi	r30, 0x37	; 55
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <GPIO_writePin+0x1fe>
    19d0:	55 95       	asr	r21
    19d2:	47 95       	ror	r20
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <GPIO_writePin+0x1fa>
    19d8:	ca 01       	movw	r24, r20
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	90 70       	andi	r25, 0x00	; 0
    19de:	88 23       	and	r24, r24
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <GPIO_writePin+0x20e>
    19e2:	28 c1       	rjmp	.+592    	; 0x1c34 <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	a1 f4       	brne	.+40     	; 0x1a12 <GPIO_writePin+0x23c>
        	            	      SET_BIT(PORTB,pin_num);
    19ea:	a8 e3       	ldi	r26, 0x38	; 56
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e8 e3       	ldi	r30, 0x38	; 56
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <GPIO_writePin+0x232>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <GPIO_writePin+0x22e>
    1a0c:	84 2b       	or	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	11 c1       	rjmp	.+546    	; 0x1c34 <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTB,pin_num);
    1a12:	a8 e3       	ldi	r26, 0x38	; 56
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GPIO_writePin+0x25a>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <GPIO_writePin+0x256>
    1a34:	80 95       	com	r24
    1a36:	84 23       	and	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	fc c0       	rjmp	.+504    	; 0x1c34 <GPIO_writePin+0x45e>
        	             }
        	            }
            break;
        case PORTC_ID:
        	if(!(DDRC&(1<<pin_num))){
    1a3c:	e4 e3       	ldi	r30, 0x34	; 52
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a9 01       	movw	r20, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <GPIO_writePin+0x27e>
    1a50:	55 95       	asr	r21
    1a52:	47 95       	ror	r20
    1a54:	8a 95       	dec	r24
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <GPIO_writePin+0x27a>
    1a58:	ca 01       	movw	r24, r20
    1a5a:	81 70       	andi	r24, 0x01	; 1
    1a5c:	90 70       	andi	r25, 0x00	; 0
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	61 f5       	brne	.+88     	; 0x1aba <GPIO_writePin+0x2e4>
        	            	if(value==LOGIC_HIGH){
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	a1 f4       	brne	.+40     	; 0x1a90 <GPIO_writePin+0x2ba>
        	            	       SET_BIT(PORTC,pin_num);
    1a68:	a5 e3       	ldi	r26, 0x35	; 53
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e3       	ldi	r30, 0x35	; 53
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <GPIO_writePin+0x2b0>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <GPIO_writePin+0x2ac>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	d2 c0       	rjmp	.+420    	; 0x1c34 <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTC,pin_num);
    1a90:	a5 e3       	ldi	r26, 0x35	; 53
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e5 e3       	ldi	r30, 0x35	; 53
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <GPIO_writePin+0x2d8>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <GPIO_writePin+0x2d4>
    1ab2:	80 95       	com	r24
    1ab4:	84 23       	and	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	bd c0       	rjmp	.+378    	; 0x1c34 <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRC&(1<<pin_num))){
    1aba:	e4 e3       	ldi	r30, 0x34	; 52
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a9 01       	movw	r20, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <GPIO_writePin+0x2fc>
    1ace:	55 95       	asr	r21
    1ad0:	47 95       	ror	r20
    1ad2:	8a 95       	dec	r24
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <GPIO_writePin+0x2f8>
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	81 70       	andi	r24, 0x01	; 1
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	88 23       	and	r24, r24
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <GPIO_writePin+0x30c>
    1ae0:	a9 c0       	rjmp	.+338    	; 0x1c34 <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	a1 f4       	brne	.+40     	; 0x1b10 <GPIO_writePin+0x33a>
        	            	      SET_BIT(PORTC,pin_num);
    1ae8:	a5 e3       	ldi	r26, 0x35	; 53
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e3       	ldi	r30, 0x35	; 53
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <GPIO_writePin+0x330>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <GPIO_writePin+0x32c>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	92 c0       	rjmp	.+292    	; 0x1c34 <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTC,pin_num);
    1b10:	a5 e3       	ldi	r26, 0x35	; 53
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e5 e3       	ldi	r30, 0x35	; 53
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <GPIO_writePin+0x358>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <GPIO_writePin+0x354>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	7d c0       	rjmp	.+250    	; 0x1c34 <GPIO_writePin+0x45e>
        	             }
        	            }
            break;
        case PORTD_ID:
        	if(!(DDRD&(1<<pin_num))){
    1b3a:	e1 e3       	ldi	r30, 0x31	; 49
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	88 2f       	mov	r24, r24
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a9 01       	movw	r20, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <GPIO_writePin+0x37c>
    1b4e:	55 95       	asr	r21
    1b50:	47 95       	ror	r20
    1b52:	8a 95       	dec	r24
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <GPIO_writePin+0x378>
    1b56:	ca 01       	movw	r24, r20
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	61 f5       	brne	.+88     	; 0x1bb8 <GPIO_writePin+0x3e2>
        	            	if(value==LOGIC_HIGH){
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	a1 f4       	brne	.+40     	; 0x1b8e <GPIO_writePin+0x3b8>
        	            	       SET_BIT(PORTD,pin_num);
    1b66:	a2 e3       	ldi	r26, 0x32	; 50
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e2 e3       	ldi	r30, 0x32	; 50
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <GPIO_writePin+0x3ae>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <GPIO_writePin+0x3aa>
    1b88:	84 2b       	or	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	53 c0       	rjmp	.+166    	; 0x1c34 <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTD,pin_num);
    1b8e:	a2 e3       	ldi	r26, 0x32	; 50
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e2 e3       	ldi	r30, 0x32	; 50
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <GPIO_writePin+0x3d6>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <GPIO_writePin+0x3d2>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	3e c0       	rjmp	.+124    	; 0x1c34 <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRD&(1<<pin_num))){
    1bb8:	e1 e3       	ldi	r30, 0x31	; 49
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	88 2f       	mov	r24, r24
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a9 01       	movw	r20, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <GPIO_writePin+0x3fa>
    1bcc:	55 95       	asr	r21
    1bce:	47 95       	ror	r20
    1bd0:	8a 95       	dec	r24
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <GPIO_writePin+0x3f6>
    1bd4:	ca 01       	movw	r24, r20
    1bd6:	81 70       	andi	r24, 0x01	; 1
    1bd8:	90 70       	andi	r25, 0x00	; 0
    1bda:	88 23       	and	r24, r24
    1bdc:	59 f1       	breq	.+86     	; 0x1c34 <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <GPIO_writePin+0x436>
        	            	      SET_BIT(PORTD,pin_num);
    1be4:	a2 e3       	ldi	r26, 0x32	; 50
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e2 e3       	ldi	r30, 0x32	; 50
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <GPIO_writePin+0x42c>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <GPIO_writePin+0x428>
    1c06:	84 2b       	or	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTD,pin_num);
    1c0c:	a2 e3       	ldi	r26, 0x32	; 50
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e2 e3       	ldi	r30, 0x32	; 50
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_writePin+0x454>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_writePin+0x450>
    1c2e:	80 95       	com	r24
    1c30:	84 23       	and	r24, r20
    1c32:	8c 93       	st	X, r24
        	             }
        	            }
            break;
      }
	}
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <GPIO_readPin+0x6>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <GPIO_readPin+0x8>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <GPIO_readPin+0xa>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	6a 83       	std	Y+2, r22	; 0x02
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	88 30       	cpi	r24, 0x08	; 8
    1c5a:	18 f4       	brcc	.+6      	; 0x1c62 <GPIO_readPin+0x1e>
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	84 30       	cpi	r24, 0x04	; 4
    1c60:	10 f0       	brcs	.+4      	; 0x1c66 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1c62:	1d 82       	std	Y+5, r1	; 0x05
    1c64:	9b c0       	rjmp	.+310    	; 0x1d9c <GPIO_readPin+0x158>
	}
	else{
        switch(port_num){
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3c 83       	std	Y+4, r19	; 0x04
    1c6e:	2b 83       	std	Y+3, r18	; 0x03
    1c70:	4b 81       	ldd	r20, Y+3	; 0x03
    1c72:	5c 81       	ldd	r21, Y+4	; 0x04
    1c74:	41 30       	cpi	r20, 0x01	; 1
    1c76:	51 05       	cpc	r21, r1
    1c78:	b1 f1       	breq	.+108    	; 0x1ce6 <GPIO_readPin+0xa2>
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	82 30       	cpi	r24, 0x02	; 2
    1c80:	91 05       	cpc	r25, r1
    1c82:	34 f4       	brge	.+12     	; 0x1c90 <GPIO_readPin+0x4c>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	21 15       	cp	r18, r1
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	71 f0       	breq	.+28     	; 0x1caa <GPIO_readPin+0x66>
    1c8e:	85 c0       	rjmp	.+266    	; 0x1d9a <GPIO_readPin+0x156>
    1c90:	4b 81       	ldd	r20, Y+3	; 0x03
    1c92:	5c 81       	ldd	r21, Y+4	; 0x04
    1c94:	42 30       	cpi	r20, 0x02	; 2
    1c96:	51 05       	cpc	r21, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <GPIO_readPin+0x58>
    1c9a:	43 c0       	rjmp	.+134    	; 0x1d22 <GPIO_readPin+0xde>
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_readPin+0x64>
    1ca6:	5b c0       	rjmp	.+182    	; 0x1d5e <GPIO_readPin+0x11a>
    1ca8:	78 c0       	rjmp	.+240    	; 0x1d9a <GPIO_readPin+0x156>
                case PORTA_ID:return (PINA&(1<<pin_num))>>pin_num;break;
    1caa:	e9 e3       	ldi	r30, 0x39	; 57
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <GPIO_readPin+0x80>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	2a 95       	dec	r18
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <GPIO_readPin+0x7c>
    1cc8:	9a 01       	movw	r18, r20
    1cca:	28 23       	and	r18, r24
    1ccc:	39 23       	and	r19, r25
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_readPin+0x98>
    1cd8:	55 95       	asr	r21
    1cda:	47 95       	ror	r20
    1cdc:	8a 95       	dec	r24
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_readPin+0x94>
    1ce0:	ca 01       	movw	r24, r20
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	5b c0       	rjmp	.+182    	; 0x1d9c <GPIO_readPin+0x158>
                case PORTB_ID:return (PINB&(1<<pin_num))>>pin_num;break;
    1ce6:	e6 e3       	ldi	r30, 0x36	; 54
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <GPIO_readPin+0xbc>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	2a 95       	dec	r18
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <GPIO_readPin+0xb8>
    1d04:	9a 01       	movw	r18, r20
    1d06:	28 23       	and	r18, r24
    1d08:	39 23       	and	r19, r25
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a9 01       	movw	r20, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <GPIO_readPin+0xd4>
    1d14:	55 95       	asr	r21
    1d16:	47 95       	ror	r20
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <GPIO_readPin+0xd0>
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	3d c0       	rjmp	.+122    	; 0x1d9c <GPIO_readPin+0x158>
                case PORTC_ID:return (PINC&(1<<pin_num))>>pin_num;break;
    1d22:	e3 e3       	ldi	r30, 0x33	; 51
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <GPIO_readPin+0xf8>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	2a 95       	dec	r18
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <GPIO_readPin+0xf4>
    1d40:	9a 01       	movw	r18, r20
    1d42:	28 23       	and	r18, r24
    1d44:	39 23       	and	r19, r25
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a9 01       	movw	r20, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <GPIO_readPin+0x110>
    1d50:	55 95       	asr	r21
    1d52:	47 95       	ror	r20
    1d54:	8a 95       	dec	r24
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <GPIO_readPin+0x10c>
    1d58:	ca 01       	movw	r24, r20
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	1f c0       	rjmp	.+62     	; 0x1d9c <GPIO_readPin+0x158>
                case PORTD_ID:return (PIND&(1<<pin_num))>>pin_num;break;
    1d5e:	e0 e3       	ldi	r30, 0x30	; 48
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_readPin+0x134>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	2a 95       	dec	r18
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_readPin+0x130>
    1d7c:	9a 01       	movw	r18, r20
    1d7e:	28 23       	and	r18, r24
    1d80:	39 23       	and	r19, r25
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <GPIO_readPin+0x14c>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <GPIO_readPin+0x148>
    1d94:	ca 01       	movw	r24, r20
    1d96:	8d 83       	std	Y+5, r24	; 0x05
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <GPIO_readPin+0x158>
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <GPIO_readPin+0x15c>
            }
	}
}
    1d9c:	5d 81       	ldd	r21, Y+5	; 0x05
    1d9e:	5e 83       	std	Y+6, r21	; 0x06
    1da0:	8e 81       	ldd	r24, Y+6	; 0x06
    1da2:	26 96       	adiw	r28, 0x06	; 6
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <GPIO_setupPortDirection+0x6>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <GPIO_setupPortDirection+0x8>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	84 30       	cpi	r24, 0x04	; 4
    1dc8:	90 f5       	brcc	.+100    	; 0x1e2e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	3c 83       	std	Y+4, r19	; 0x04
    1dd2:	2b 83       	std	Y+3, r18	; 0x03
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	91 05       	cpc	r25, r1
    1ddc:	d1 f0       	breq	.+52     	; 0x1e12 <GPIO_setupPortDirection+0x5e>
    1dde:	2b 81       	ldd	r18, Y+3	; 0x03
    1de0:	3c 81       	ldd	r19, Y+4	; 0x04
    1de2:	22 30       	cpi	r18, 0x02	; 2
    1de4:	31 05       	cpc	r19, r1
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <GPIO_setupPortDirection+0x3e>
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	61 f0       	breq	.+24     	; 0x1e08 <GPIO_setupPortDirection+0x54>
    1df0:	1e c0       	rjmp	.+60     	; 0x1e2e <GPIO_setupPortDirection+0x7a>
    1df2:	2b 81       	ldd	r18, Y+3	; 0x03
    1df4:	3c 81       	ldd	r19, Y+4	; 0x04
    1df6:	22 30       	cpi	r18, 0x02	; 2
    1df8:	31 05       	cpc	r19, r1
    1dfa:	81 f0       	breq	.+32     	; 0x1e1c <GPIO_setupPortDirection+0x68>
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	91 05       	cpc	r25, r1
    1e04:	81 f0       	breq	.+32     	; 0x1e26 <GPIO_setupPortDirection+0x72>
    1e06:	13 c0       	rjmp	.+38     	; 0x1e2e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e08:	ea e3       	ldi	r30, 0x3A	; 58
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	80 83       	st	Z, r24
    1e10:	0e c0       	rjmp	.+28     	; 0x1e2e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e12:	e7 e3       	ldi	r30, 0x37	; 55
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	80 83       	st	Z, r24
    1e1a:	09 c0       	rjmp	.+18     	; 0x1e2e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e1c:	e4 e3       	ldi	r30, 0x34	; 52
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	80 83       	st	Z, r24
    1e24:	04 c0       	rjmp	.+8      	; 0x1e2e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e26:	e1 e3       	ldi	r30, 0x31	; 49
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <GPIO_writePort+0x6>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <GPIO_writePort+0x8>
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	84 30       	cpi	r24, 0x04	; 4
    1e50:	90 f5       	brcc	.+100    	; 0x1eb6 <GPIO_writePort+0x7a>
			{

			}
		else{
        switch(port_num){
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3c 83       	std	Y+4, r19	; 0x04
    1e5a:	2b 83       	std	Y+3, r18	; 0x03
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	91 05       	cpc	r25, r1
    1e64:	d1 f0       	breq	.+52     	; 0x1e9a <GPIO_writePort+0x5e>
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <GPIO_writePort+0x3e>
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	61 f0       	breq	.+24     	; 0x1e90 <GPIO_writePort+0x54>
    1e78:	1e c0       	rjmp	.+60     	; 0x1eb6 <GPIO_writePort+0x7a>
    1e7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7e:	22 30       	cpi	r18, 0x02	; 2
    1e80:	31 05       	cpc	r19, r1
    1e82:	81 f0       	breq	.+32     	; 0x1ea4 <GPIO_writePort+0x68>
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	83 30       	cpi	r24, 0x03	; 3
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	81 f0       	breq	.+32     	; 0x1eae <GPIO_writePort+0x72>
    1e8e:	13 c0       	rjmp	.+38     	; 0x1eb6 <GPIO_writePort+0x7a>
                case PORTA_ID: PORTA= value;break;
    1e90:	eb e3       	ldi	r30, 0x3B	; 59
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	80 83       	st	Z, r24
    1e98:	0e c0       	rjmp	.+28     	; 0x1eb6 <GPIO_writePort+0x7a>
                case PORTB_ID: PORTB= value;break;
    1e9a:	e8 e3       	ldi	r30, 0x38	; 56
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	80 83       	st	Z, r24
    1ea2:	09 c0       	rjmp	.+18     	; 0x1eb6 <GPIO_writePort+0x7a>
                case PORTC_ID: PORTC= value;break;
    1ea4:	e5 e3       	ldi	r30, 0x35	; 53
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	80 83       	st	Z, r24
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <GPIO_writePort+0x7a>
                case PORTD_ID: PORTD= value;break;
    1eae:	e2 e3       	ldi	r30, 0x32	; 50
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	80 83       	st	Z, r24
        }    }
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <GPIO_readPort+0x6>
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <GPIO_readPort+0x8>
    1ecc:	0f 92       	push	r0
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	if((port_num >= NUM_OF_PORTS))
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	84 30       	cpi	r24, 0x04	; 4
    1ed8:	10 f0       	brcs	.+4      	; 0x1ede <GPIO_readPort+0x1a>
		{
			return LOGIC_LOW;
    1eda:	1c 82       	std	Y+4, r1	; 0x04
    1edc:	34 c0       	rjmp	.+104    	; 0x1f46 <GPIO_readPort+0x82>
		}
	else{
        switch(port_num){
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	3b 83       	std	Y+3, r19	; 0x03
    1ee6:	2a 83       	std	Y+2, r18	; 0x02
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	91 05       	cpc	r25, r1
    1ef0:	d1 f0       	breq	.+52     	; 0x1f26 <GPIO_readPort+0x62>
    1ef2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <GPIO_readPort+0x42>
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	61 f0       	breq	.+24     	; 0x1f1c <GPIO_readPort+0x58>
    1f04:	1f c0       	rjmp	.+62     	; 0x1f44 <GPIO_readPort+0x80>
    1f06:	2a 81       	ldd	r18, Y+2	; 0x02
    1f08:	3b 81       	ldd	r19, Y+3	; 0x03
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	81 f0       	breq	.+32     	; 0x1f30 <GPIO_readPort+0x6c>
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	91 05       	cpc	r25, r1
    1f18:	81 f0       	breq	.+32     	; 0x1f3a <GPIO_readPort+0x76>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <GPIO_readPort+0x80>
                case PORTA_ID:return PINA;break;
    1f1c:	e9 e3       	ldi	r30, 0x39	; 57
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	90 81       	ld	r25, Z
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	10 c0       	rjmp	.+32     	; 0x1f46 <GPIO_readPort+0x82>
                case PORTB_ID:return PINB;break;
    1f26:	e6 e3       	ldi	r30, 0x36	; 54
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	20 81       	ld	r18, Z
    1f2c:	2c 83       	std	Y+4, r18	; 0x04
    1f2e:	0b c0       	rjmp	.+22     	; 0x1f46 <GPIO_readPort+0x82>
                case PORTC_ID:return PINC;break;
    1f30:	e3 e3       	ldi	r30, 0x33	; 51
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	30 81       	ld	r19, Z
    1f36:	3c 83       	std	Y+4, r19	; 0x04
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <GPIO_readPort+0x82>
                case PORTD_ID:return PIND;break;
    1f3a:	e0 e3       	ldi	r30, 0x30	; 48
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	8c 83       	std	Y+4, r24	; 0x04
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <GPIO_readPort+0x82>
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <GPIO_readPort+0x86>
            }
}}
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	9d 83       	std	Y+5, r25	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <PWM_Timer0_Start>:
➢ Setup the prescaler with F_CPU/8.---
➢ Setup the compare value based on the required input duty cycle--
➢ Setup the direction for OC0 as output pin through the GPIO driver.--
➢ The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
*/
void PWM_Timer0_Start(uint8 duty_cycle){
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 6 because tick time =250 and max ocr0 =256
    1f6c:	e2 e5       	ldi	r30, 0x52	; 82
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	10 82       	st	Z, r1
	//OCR0  = duty_cycle; // Set Compare Value
	 OCR0  = 255*((float32)duty_cycle/100); // Set Compare Value
    1f72:	0c e5       	ldi	r16, 0x5C	; 92
    1f74:	10 e0       	ldi	r17, 0x00	; 0
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e0       	ldi	r26, 0x00	; 0
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	48 ec       	ldi	r20, 0xC8	; 200
    1f96:	52 e4       	ldi	r21, 0x42	; 66
    1f98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	53 e4       	ldi	r21, 0x43	; 67
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	80 83       	st	Z, r24
	//OCR0 = ceil ((duty_cycle / 100.0) * 255);    /* Set compare value */
	GPIO_setupPinDirection(PORTB_ID, PWM_PIN_ID, PIN_OUTPUT );
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	63 e0       	ldi	r22, 0x03	; 3
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 00 0b 	call	0x1600	; 0x1600 <GPIO_setupPinDirection>
	//DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC

	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1fce:	e3 e5       	ldi	r30, 0x53	; 83
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	8a e6       	ldi	r24, 0x6A	; 106
    1fd4:	80 83       	st	Z, r24
}
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	08 95       	ret

00001fe2 <__vector_7>:
 *******************************************************************************/
//two ISR’s for Normal and Compare interrupts.

/* For calling the call back functions */
ISR (TIMER1_COMPA_vect)
{
    1fe2:	1f 92       	push	r1
    1fe4:	0f 92       	push	r0
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	0f 92       	push	r0
    1fea:	11 24       	eor	r1, r1
    1fec:	2f 93       	push	r18
    1fee:	3f 93       	push	r19
    1ff0:	4f 93       	push	r20
    1ff2:	5f 93       	push	r21
    1ff4:	6f 93       	push	r22
    1ff6:	7f 93       	push	r23
    1ff8:	8f 93       	push	r24
    1ffa:	9f 93       	push	r25
    1ffc:	af 93       	push	r26
    1ffe:	bf 93       	push	r27
    2000:	ef 93       	push	r30
    2002:	ff 93       	push	r31
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBack_Ptr != NULL_PTR)
    200c:	80 91 84 01 	lds	r24, 0x0184
    2010:	90 91 85 01 	lds	r25, 0x0185
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	29 f0       	breq	.+10     	; 0x2022 <__vector_7+0x40>
		{
			(*g_callBack_Ptr)();
    2018:	e0 91 84 01 	lds	r30, 0x0184
    201c:	f0 91 85 01 	lds	r31, 0x0185
    2020:	09 95       	icall
		}
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	ff 91       	pop	r31
    2028:	ef 91       	pop	r30
    202a:	bf 91       	pop	r27
    202c:	af 91       	pop	r26
    202e:	9f 91       	pop	r25
    2030:	8f 91       	pop	r24
    2032:	7f 91       	pop	r23
    2034:	6f 91       	pop	r22
    2036:	5f 91       	pop	r21
    2038:	4f 91       	pop	r20
    203a:	3f 91       	pop	r19
    203c:	2f 91       	pop	r18
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <__vector_9>:

ISR (TIMER1_OVF_vect)
{
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
	if (g_callBack_Ptr != NULL_PTR)
    2072:	80 91 84 01 	lds	r24, 0x0184
    2076:	90 91 85 01 	lds	r25, 0x0185
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	29 f0       	breq	.+10     	; 0x2088 <__vector_9+0x40>
	{
		(*g_callBack_Ptr)();
    207e:	e0 91 84 01 	lds	r30, 0x0184
    2082:	f0 91 85 01 	lds	r31, 0x0185
    2086:	09 95       	icall
	}
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	ff 91       	pop	r31
    208e:	ef 91       	pop	r30
    2090:	bf 91       	pop	r27
    2092:	af 91       	pop	r26
    2094:	9f 91       	pop	r25
    2096:	8f 91       	pop	r24
    2098:	7f 91       	pop	r23
    209a:	6f 91       	pop	r22
    209c:	5f 91       	pop	r21
    209e:	4f 91       	pop	r20
    20a0:	3f 91       	pop	r19
    20a2:	2f 91       	pop	r18
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <Timer1_init>:

/*● Description
⮚ Function to initialize the Timer driver*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <Timer1_init+0x6>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value; /* Set the initial timer value */
    20bc:	ac e4       	ldi	r26, 0x4C	; 76
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e9 81       	ldd	r30, Y+1	; 0x01
    20c2:	fa 81       	ldd	r31, Y+2	; 0x02
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	9c 93       	st	X, r25
    20cc:	8e 93       	st	-X, r24
	TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler);/*Clock Select(Prescaler Setup), Setup the first three bits in TCCR1B reg*/
    20ce:	ae e4       	ldi	r26, 0x4E	; 78
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ee e4       	ldi	r30, 0x4E	; 78
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	98 2f       	mov	r25, r24
    20da:	98 7f       	andi	r25, 0xF8	; 248
    20dc:	e9 81       	ldd	r30, Y+1	; 0x01
    20de:	fa 81       	ldd	r31, Y+2	; 0x02
    20e0:	84 81       	ldd	r24, Z+4	; 0x04
    20e2:	89 2b       	or	r24, r25
    20e4:	8c 93       	st	X, r24

	if(Config_Ptr->mode==NORMAL){
    20e6:	e9 81       	ldd	r30, Y+1	; 0x01
    20e8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ea:	85 81       	ldd	r24, Z+5	; 0x05
    20ec:	88 23       	and	r24, r24
    20ee:	e1 f4       	brne	.+56     	; 0x2128 <Timer1_init+0x7a>
		TCCR1B=(TCCR1B & 0xF7)| ((Config_Ptr->mode)<<3);/*Waveform Generation Mode Bit, 0 for NORMAL Mode, clear the forth bit(WGM12) in TCCR1B reg*/
    20f0:	ae e4       	ldi	r26, 0x4E	; 78
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ee e4       	ldi	r30, 0x4E	; 78
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	28 2f       	mov	r18, r24
    20fc:	27 7f       	andi	r18, 0xF7	; 247
    20fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2100:	fa 81       	ldd	r31, Y+2	; 0x02
    2102:	85 81       	ldd	r24, Z+5	; 0x05
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	82 2b       	or	r24, r18
    2116:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMER1_TIMSK_TOIE1);/*Overflow Interrupt Enable*/
    2118:	a9 e5       	ldi	r26, 0x59	; 89
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e9 e5       	ldi	r30, 0x59	; 89
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	84 60       	ori	r24, 0x04	; 4
    2124:	8c 93       	st	X, r24
    2126:	30 c0       	rjmp	.+96     	; 0x2188 <Timer1_init+0xda>
	}
	else if(Config_Ptr->mode==CTC){
    2128:	e9 81       	ldd	r30, Y+1	; 0x01
    212a:	fa 81       	ldd	r31, Y+2	; 0x02
    212c:	85 81       	ldd	r24, Z+5	; 0x05
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	59 f5       	brne	.+86     	; 0x2188 <Timer1_init+0xda>
		 TCCR1B=(TCCR1B & 0xF7)| ((Config_Ptr->mode)<<3);/*Waveform Generation Mode Bit, 1 for CTC Mode, Set the forth bit(WGM12) in TCCR1B reg*/
    2132:	ae e4       	ldi	r26, 0x4E	; 78
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ee e4       	ldi	r30, 0x4E	; 78
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	28 2f       	mov	r18, r24
    213e:	27 7f       	andi	r18, 0xF7	; 247
    2140:	e9 81       	ldd	r30, Y+1	; 0x01
    2142:	fa 81       	ldd	r31, Y+2	; 0x02
    2144:	85 81       	ldd	r24, Z+5	; 0x05
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	82 2b       	or	r24, r18
    2158:	8c 93       	st	X, r24
		 OCR1A=Config_Ptr->compare_value; /* Set the required compare value */
    215a:	aa e4       	ldi	r26, 0x4A	; 74
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e9 81       	ldd	r30, Y+1	; 0x01
    2160:	fa 81       	ldd	r31, Y+2	; 0x02
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	93 81       	ldd	r25, Z+3	; 0x03
    2166:	11 96       	adiw	r26, 0x01	; 1
    2168:	9c 93       	st	X, r25
    216a:	8e 93       	st	-X, r24
		 SET_BIT(TIMSK,TIMER1_TIMSK_OCIE1A); /*Output Compare A Match Interrupt Enable*/
    216c:	a9 e5       	ldi	r26, 0x59	; 89
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e9 e5       	ldi	r30, 0x59	; 89
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	80 61       	ori	r24, 0x10	; 16
    2178:	8c 93       	st	X, r24
		 SET_BIT(TIMSK,TIMER1_TCCR1A_COM1A1);/*Compare Output Mode for Compare unit A, Clear OC1A on compare match (Set output to low level)*/
    217a:	a9 e5       	ldi	r26, 0x59	; 89
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e9 e5       	ldi	r30, 0x59	; 89
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	80 68       	ori	r24, 0x80	; 128
    2186:	8c 93       	st	X, r24
	}
}
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <Timer1_deInit>:


/*● Description
⮚ Function to disable the Timer1.*/
void Timer1_deInit(void){
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=(TCCR1B & 0xF8); /*No_clock_source,disable the Timer1*/
    219a:	ae e4       	ldi	r26, 0x4E	; 78
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	ee e4       	ldi	r30, 0x4E	; 78
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	88 7f       	andi	r24, 0xF8	; 248
    21a6:	8c 93       	st	X, r24
}
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <Timer1_setCallBack>:


/*● Description
⮚ Function to set the Call Back function address.*/
void Timer1_setCallBack(void(*a_ptr)(void)){
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <Timer1_setCallBack+0x6>
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_Ptr = (volatile void*)a_ptr;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	90 93 85 01 	sts	0x0185, r25
    21c4:	80 93 84 01 	sts	0x0184, r24
}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <TWI_init+0xa>
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	9a 83       	std	Y+2, r25	; 0x02
    21e2:	89 83       	std	Y+1, r24	; 0x01
//
//    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
//       General Call Recognition: Off */
//    TWAR = 0b00000010; // my address = 0x01 :)
	 /* Bit Rate using zero pre-scaler TWPS=00 */
		TWSR = 0x00;
    21e4:	e1 e2       	ldi	r30, 0x21	; 33
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	10 82       	st	Z, r1
	    TWBR = (uint8)(((uint16)1000 * F_CPU) - (16 * Config_Ptr -> bit_rate)) / (2 * Config_Ptr -> bit_rate);
    21ea:	00 e2       	ldi	r16, 0x20	; 32
    21ec:	10 e0       	ldi	r17, 0x00	; 0
    21ee:	e9 81       	ldd	r30, Y+1	; 0x01
    21f0:	fa 81       	ldd	r31, Y+2	; 0x02
    21f2:	81 81       	ldd	r24, Z+1	; 0x01
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	82 95       	swap	r24
    21fa:	92 95       	swap	r25
    21fc:	90 7f       	andi	r25, 0xF0	; 240
    21fe:	98 27       	eor	r25, r24
    2200:	80 7f       	andi	r24, 0xF0	; 240
    2202:	98 27       	eor	r25, r24
    2204:	81 95       	neg	r24
    2206:	48 2f       	mov	r20, r24
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	e9 81       	ldd	r30, Y+1	; 0x01
    220c:	fa 81       	ldd	r31, Y+2	; 0x02
    220e:	81 81       	ldd	r24, Z+1	; 0x01
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9c 01       	movw	r18, r24
    2216:	22 0f       	add	r18, r18
    2218:	33 1f       	adc	r19, r19
    221a:	ca 01       	movw	r24, r20
    221c:	b9 01       	movw	r22, r18
    221e:	0e 94 a9 12 	call	0x2552	; 0x2552 <__divmodhi4>
    2222:	cb 01       	movw	r24, r22
    2224:	f8 01       	movw	r30, r16
    2226:	80 83       	st	Z, r24

	    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
	       General Call Recognition: ON */
	    TWAR = ((Config_Ptr -> address) << 1) | 1;
    2228:	a2 e2       	ldi	r26, 0x22	; 34
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e9 81       	ldd	r30, Y+1	; 0x01
    222e:	fa 81       	ldd	r31, Y+2	; 0x02
    2230:	80 81       	ld	r24, Z
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	81 60       	ori	r24, 0x01	; 1
    223c:	8c 93       	st	X, r24

	    TWCR = (1<<TWEN); /* enable TWI */
    223e:	e6 e5       	ldi	r30, 0x56	; 86
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	84 e0       	ldi	r24, 0x04	; 4
    2244:	80 83       	st	Z, r24
}
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	08 95       	ret

00002254 <TWI_start>:

void TWI_start(void)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    225c:	e6 e5       	ldi	r30, 0x56	; 86
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	84 ea       	ldi	r24, 0xA4	; 164
    2262:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2264:	e6 e5       	ldi	r30, 0x56	; 86
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	88 23       	and	r24, r24
    226c:	dc f7       	brge	.-10     	; 0x2264 <TWI_start+0x10>
}
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <TWI_stop>:

void TWI_stop(void)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    227c:	e6 e5       	ldi	r30, 0x56	; 86
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	84 e9       	ldi	r24, 0x94	; 148
    2282:	80 83       	st	Z, r24
}
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2296:	e3 e2       	ldi	r30, 0x23	; 35
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    229e:	e6 e5       	ldi	r30, 0x56	; 86
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	84 e8       	ldi	r24, 0x84	; 132
    22a4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22a6:	e6 e5       	ldi	r30, 0x56	; 86
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	88 23       	and	r24, r24
    22ae:	dc f7       	brge	.-10     	; 0x22a6 <TWI_writeByte+0x1c>
}
    22b0:	0f 90       	pop	r0
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    22c0:	e6 e5       	ldi	r30, 0x56	; 86
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	84 ec       	ldi	r24, 0xC4	; 196
    22c6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22c8:	e6 e5       	ldi	r30, 0x56	; 86
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	88 23       	and	r24, r24
    22d0:	dc f7       	brge	.-10     	; 0x22c8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    22d2:	e3 e2       	ldi	r30, 0x23	; 35
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
}
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    22e6:	e6 e5       	ldi	r30, 0x56	; 86
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	84 e8       	ldi	r24, 0x84	; 132
    22ec:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22ee:	e6 e5       	ldi	r30, 0x56	; 86
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	88 23       	and	r24, r24
    22f6:	dc f7       	brge	.-10     	; 0x22ee <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    22f8:	e3 e2       	ldi	r30, 0x23	; 35
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
}
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	0f 92       	push	r0
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    230e:	e1 e2       	ldi	r30, 0x21	; 33
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	88 7f       	andi	r24, 0xF8	; 248
    2316:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
}
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	00 d0       	rcall	.+0      	; 0x2328 <UART_init+0x6>
    2328:	00 d0       	rcall	.+0      	; 0x232a <UART_init+0x8>
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2332:	1a 82       	std	Y+2, r1	; 0x02
    2334:	19 82       	std	Y+1, r1	; 0x01

		/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);
    2336:	eb e2       	ldi	r30, 0x2B	; 43
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	80 83       	st	Z, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
		UCSRB = (1<<RXEN) | (1<<TXEN);
    233e:	ea e2       	ldi	r30, 0x2A	; 42
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	88 e1       	ldi	r24, 0x18	; 24
    2344:	80 83       	st	Z, r24
		 * UPM1:0  = 00 Disable parity bit
		 * USBS    = 0 One stop bit
		 * UCSZ1:0 = 11 For 8-bit data mode
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
		SET_BIT (UCSRA, URSEL);
    2346:	ab e2       	ldi	r26, 0x2B	; 43
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	eb e2       	ldi	r30, 0x2B	; 43
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 68       	ori	r24, 0x80	; 128
    2352:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xCF) | ((Config_Ptr -> parity & 0x03) << 4); /* Select the type of parity bit */
    2354:	a0 e4       	ldi	r26, 0x40	; 64
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e0 e4       	ldi	r30, 0x40	; 64
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	28 2f       	mov	r18, r24
    2360:	2f 7c       	andi	r18, 0xCF	; 207
    2362:	eb 81       	ldd	r30, Y+3	; 0x03
    2364:	fc 81       	ldd	r31, Y+4	; 0x04
    2366:	81 81       	ldd	r24, Z+1	; 0x01
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	83 70       	andi	r24, 0x03	; 3
    236e:	90 70       	andi	r25, 0x00	; 0
    2370:	82 95       	swap	r24
    2372:	92 95       	swap	r25
    2374:	90 7f       	andi	r25, 0xF0	; 240
    2376:	98 27       	eor	r25, r24
    2378:	80 7f       	andi	r24, 0xF0	; 240
    237a:	98 27       	eor	r25, r24
    237c:	82 2b       	or	r24, r18
    237e:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF7) | ((Config_Ptr -> stop_bit   & 0x01) << 3); /* Select number of stop bits */
    2380:	a0 e4       	ldi	r26, 0x40	; 64
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e0 e4       	ldi	r30, 0x40	; 64
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	28 2f       	mov	r18, r24
    238c:	27 7f       	andi	r18, 0xF7	; 247
    238e:	eb 81       	ldd	r30, Y+3	; 0x03
    2390:	fc 81       	ldd	r31, Y+4	; 0x04
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	81 70       	andi	r24, 0x01	; 1
    239a:	90 70       	andi	r25, 0x00	; 0
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	82 2b       	or	r24, r18
    23aa:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF8) | (Config_Ptr -> bit_data    & 0x07);       /* Select number of data bits */
    23ac:	a0 e4       	ldi	r26, 0x40	; 64
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e0 e4       	ldi	r30, 0x40	; 64
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	98 2f       	mov	r25, r24
    23b8:	98 7f       	andi	r25, 0xF8	; 248
    23ba:	eb 81       	ldd	r30, Y+3	; 0x03
    23bc:	fc 81       	ldd	r31, Y+4	; 0x04
    23be:	80 81       	ld	r24, Z
    23c0:	87 70       	andi	r24, 0x07	; 7
    23c2:	89 2b       	or	r24, r25
    23c4:	8c 93       	st	X, r24

		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / (Config_Ptr -> baud_rate * 8UL))) - 1);
    23c6:	eb 81       	ldd	r30, Y+3	; 0x03
    23c8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ca:	83 81       	ldd	r24, Z+3	; 0x03
    23cc:	94 81       	ldd	r25, Z+4	; 0x04
    23ce:	cc 01       	movw	r24, r24
    23d0:	a0 e0       	ldi	r26, 0x00	; 0
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	aa 1f       	adc	r26, r26
    23da:	bb 1f       	adc	r27, r27
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	aa 1f       	adc	r26, r26
    23e2:	bb 1f       	adc	r27, r27
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	aa 1f       	adc	r26, r26
    23ea:	bb 1f       	adc	r27, r27
    23ec:	9c 01       	movw	r18, r24
    23ee:	ad 01       	movw	r20, r26
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	92 e1       	ldi	r25, 0x12	; 18
    23f4:	aa e7       	ldi	r26, 0x7A	; 122
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 bc 12 	call	0x2578	; 0x2578 <__udivmodsi4>
    2400:	da 01       	movw	r26, r20
    2402:	c9 01       	movw	r24, r18
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	9a 83       	std	Y+2, r25	; 0x02
    2408:	89 83       	std	Y+1, r24	; 0x01

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = ubrr_value>>8;
    240a:	e0 e4       	ldi	r30, 0x40	; 64
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	89 2f       	mov	r24, r25
    2414:	99 27       	eor	r25, r25
    2416:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    2418:	e9 e2       	ldi	r30, 0x29	; 41
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	80 83       	st	Z, r24
}
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	0f 92       	push	r0
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    243a:	eb e2       	ldi	r30, 0x2B	; 43
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	80 72       	andi	r24, 0x20	; 32
    2446:	90 70       	andi	r25, 0x00	; 0
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	b9 f3       	breq	.-18     	; 0x243a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    244c:	ec e2       	ldi	r30, 0x2C	; 44
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2464:	eb e2       	ldi	r30, 0x2B	; 43
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	88 23       	and	r24, r24
    246c:	dc f7       	brge	.-10     	; 0x2464 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    246e:	ec e2       	ldi	r30, 0x2C	; 44
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <UART_sendString+0x6>
    2480:	0f 92       	push	r0
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	9b 83       	std	Y+3, r25	; 0x03
    2488:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    248a:	19 82       	std	Y+1, r1	; 0x01
    248c:	0e c0       	rjmp	.+28     	; 0x24aa <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	9b 81       	ldd	r25, Y+3	; 0x03
    2498:	fc 01       	movw	r30, r24
    249a:	e2 0f       	add	r30, r18
    249c:	f3 1f       	adc	r31, r19
    249e:	80 81       	ld	r24, Z
    24a0:	0e 94 17 12 	call	0x242e	; 0x242e <UART_sendByte>
		i++;
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	8f 5f       	subi	r24, 0xFF	; 255
    24a8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	9b 81       	ldd	r25, Y+3	; 0x03
    24b4:	fc 01       	movw	r30, r24
    24b6:	e2 0f       	add	r30, r18
    24b8:	f3 1f       	adc	r31, r19
    24ba:	80 81       	ld	r24, Z
    24bc:	88 23       	and	r24, r24
    24be:	39 f7       	brne	.-50     	; 0x248e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    24cc:	0f 93       	push	r16
    24ce:	1f 93       	push	r17
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <UART_receiveString+0xa>
    24d6:	0f 92       	push	r0
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	9b 83       	std	Y+3, r25	; 0x03
    24de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24e0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	9b 81       	ldd	r25, Y+3	; 0x03
    24ec:	8c 01       	movw	r16, r24
    24ee:	02 0f       	add	r16, r18
    24f0:	13 1f       	adc	r17, r19
    24f2:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_recieveByte>
    24f6:	f8 01       	movw	r30, r16
    24f8:	80 83       	st	Z, r24
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	8c 01       	movw	r16, r24
    250e:	02 0f       	add	r16, r18
    2510:	13 1f       	adc	r17, r19
    2512:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_recieveByte>
    2516:	f8 01       	movw	r30, r16
    2518:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	9b 81       	ldd	r25, Y+3	; 0x03
    2524:	fc 01       	movw	r30, r24
    2526:	e2 0f       	add	r30, r18
    2528:	f3 1f       	adc	r31, r19
    252a:	80 81       	ld	r24, Z
    252c:	83 32       	cpi	r24, 0x23	; 35
    252e:	31 f7       	brne	.-52     	; 0x24fc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	fc 01       	movw	r30, r24
    253c:	e2 0f       	add	r30, r18
    253e:	f3 1f       	adc	r31, r19
    2540:	10 82       	st	Z, r1
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	1f 91       	pop	r17
    254e:	0f 91       	pop	r16
    2550:	08 95       	ret

00002552 <__divmodhi4>:
    2552:	97 fb       	bst	r25, 7
    2554:	09 2e       	mov	r0, r25
    2556:	07 26       	eor	r0, r23
    2558:	0a d0       	rcall	.+20     	; 0x256e <__divmodhi4_neg1>
    255a:	77 fd       	sbrc	r23, 7
    255c:	04 d0       	rcall	.+8      	; 0x2566 <__divmodhi4_neg2>
    255e:	2e d0       	rcall	.+92     	; 0x25bc <__udivmodhi4>
    2560:	06 d0       	rcall	.+12     	; 0x256e <__divmodhi4_neg1>
    2562:	00 20       	and	r0, r0
    2564:	1a f4       	brpl	.+6      	; 0x256c <__divmodhi4_exit>

00002566 <__divmodhi4_neg2>:
    2566:	70 95       	com	r23
    2568:	61 95       	neg	r22
    256a:	7f 4f       	sbci	r23, 0xFF	; 255

0000256c <__divmodhi4_exit>:
    256c:	08 95       	ret

0000256e <__divmodhi4_neg1>:
    256e:	f6 f7       	brtc	.-4      	; 0x256c <__divmodhi4_exit>
    2570:	90 95       	com	r25
    2572:	81 95       	neg	r24
    2574:	9f 4f       	sbci	r25, 0xFF	; 255
    2576:	08 95       	ret

00002578 <__udivmodsi4>:
    2578:	a1 e2       	ldi	r26, 0x21	; 33
    257a:	1a 2e       	mov	r1, r26
    257c:	aa 1b       	sub	r26, r26
    257e:	bb 1b       	sub	r27, r27
    2580:	fd 01       	movw	r30, r26
    2582:	0d c0       	rjmp	.+26     	; 0x259e <__udivmodsi4_ep>

00002584 <__udivmodsi4_loop>:
    2584:	aa 1f       	adc	r26, r26
    2586:	bb 1f       	adc	r27, r27
    2588:	ee 1f       	adc	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	a2 17       	cp	r26, r18
    258e:	b3 07       	cpc	r27, r19
    2590:	e4 07       	cpc	r30, r20
    2592:	f5 07       	cpc	r31, r21
    2594:	20 f0       	brcs	.+8      	; 0x259e <__udivmodsi4_ep>
    2596:	a2 1b       	sub	r26, r18
    2598:	b3 0b       	sbc	r27, r19
    259a:	e4 0b       	sbc	r30, r20
    259c:	f5 0b       	sbc	r31, r21

0000259e <__udivmodsi4_ep>:
    259e:	66 1f       	adc	r22, r22
    25a0:	77 1f       	adc	r23, r23
    25a2:	88 1f       	adc	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	1a 94       	dec	r1
    25a8:	69 f7       	brne	.-38     	; 0x2584 <__udivmodsi4_loop>
    25aa:	60 95       	com	r22
    25ac:	70 95       	com	r23
    25ae:	80 95       	com	r24
    25b0:	90 95       	com	r25
    25b2:	9b 01       	movw	r18, r22
    25b4:	ac 01       	movw	r20, r24
    25b6:	bd 01       	movw	r22, r26
    25b8:	cf 01       	movw	r24, r30
    25ba:	08 95       	ret

000025bc <__udivmodhi4>:
    25bc:	aa 1b       	sub	r26, r26
    25be:	bb 1b       	sub	r27, r27
    25c0:	51 e1       	ldi	r21, 0x11	; 17
    25c2:	07 c0       	rjmp	.+14     	; 0x25d2 <__udivmodhi4_ep>

000025c4 <__udivmodhi4_loop>:
    25c4:	aa 1f       	adc	r26, r26
    25c6:	bb 1f       	adc	r27, r27
    25c8:	a6 17       	cp	r26, r22
    25ca:	b7 07       	cpc	r27, r23
    25cc:	10 f0       	brcs	.+4      	; 0x25d2 <__udivmodhi4_ep>
    25ce:	a6 1b       	sub	r26, r22
    25d0:	b7 0b       	sbc	r27, r23

000025d2 <__udivmodhi4_ep>:
    25d2:	88 1f       	adc	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	5a 95       	dec	r21
    25d8:	a9 f7       	brne	.-22     	; 0x25c4 <__udivmodhi4_loop>
    25da:	80 95       	com	r24
    25dc:	90 95       	com	r25
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	08 95       	ret

000025e4 <__prologue_saves__>:
    25e4:	2f 92       	push	r2
    25e6:	3f 92       	push	r3
    25e8:	4f 92       	push	r4
    25ea:	5f 92       	push	r5
    25ec:	6f 92       	push	r6
    25ee:	7f 92       	push	r7
    25f0:	8f 92       	push	r8
    25f2:	9f 92       	push	r9
    25f4:	af 92       	push	r10
    25f6:	bf 92       	push	r11
    25f8:	cf 92       	push	r12
    25fa:	df 92       	push	r13
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	ca 1b       	sub	r28, r26
    260e:	db 0b       	sbc	r29, r27
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	09 94       	ijmp

0000261c <__epilogue_restores__>:
    261c:	2a 88       	ldd	r2, Y+18	; 0x12
    261e:	39 88       	ldd	r3, Y+17	; 0x11
    2620:	48 88       	ldd	r4, Y+16	; 0x10
    2622:	5f 84       	ldd	r5, Y+15	; 0x0f
    2624:	6e 84       	ldd	r6, Y+14	; 0x0e
    2626:	7d 84       	ldd	r7, Y+13	; 0x0d
    2628:	8c 84       	ldd	r8, Y+12	; 0x0c
    262a:	9b 84       	ldd	r9, Y+11	; 0x0b
    262c:	aa 84       	ldd	r10, Y+10	; 0x0a
    262e:	b9 84       	ldd	r11, Y+9	; 0x09
    2630:	c8 84       	ldd	r12, Y+8	; 0x08
    2632:	df 80       	ldd	r13, Y+7	; 0x07
    2634:	ee 80       	ldd	r14, Y+6	; 0x06
    2636:	fd 80       	ldd	r15, Y+5	; 0x05
    2638:	0c 81       	ldd	r16, Y+4	; 0x04
    263a:	1b 81       	ldd	r17, Y+3	; 0x03
    263c:	aa 81       	ldd	r26, Y+2	; 0x02
    263e:	b9 81       	ldd	r27, Y+1	; 0x01
    2640:	ce 0f       	add	r28, r30
    2642:	d1 1d       	adc	r29, r1
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	ed 01       	movw	r28, r26
    2650:	08 95       	ret

00002652 <_exit>:
    2652:	f8 94       	cli

00002654 <__stop_program>:
    2654:	ff cf       	rjmp	.-2      	; 0x2654 <__stop_program>
