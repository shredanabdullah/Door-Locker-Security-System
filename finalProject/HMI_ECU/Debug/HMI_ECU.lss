
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00002d2a  00002dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000ea  008000ea  00002e48  2**0
                  ALLOC
  3 .stab         0000276c  00000000  00000000  00002e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ef  00000000  00000000  000055b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000869c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009587  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a721  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aeef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ec       	ldi	r26, 0xCB	; 203
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ec       	ldi	r24, 0xCB	; 203
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void timerCallBack_3Sec (void);
void timerCallBack_60Sec (void);


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	LCD_init (); /* Initialize LCD */
     b5a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_init>
	/* UART configurations with 8 Bits data, No parity, one stop bit and 9600 baud rate*/

	UART_ConfigType s_configuration = {EIGHT_BITS, Disabled, one_bit, BR_9600};
     b5e:	9e 01       	movw	r18, r28
     b60:	2f 5f       	subi	r18, 0xFF	; 255
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	39 87       	std	Y+9, r19	; 0x09
     b66:	28 87       	std	Y+8, r18	; 0x08
     b68:	85 ee       	ldi	r24, 0xE5	; 229
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	9b 87       	std	Y+11, r25	; 0x0b
     b6e:	8a 87       	std	Y+10, r24	; 0x0a
     b70:	95 e0       	ldi	r25, 0x05	; 5
     b72:	9c 87       	std	Y+12, r25	; 0x0c
     b74:	ea 85       	ldd	r30, Y+10	; 0x0a
     b76:	fb 85       	ldd	r31, Y+11	; 0x0b
     b78:	00 80       	ld	r0, Z
     b7a:	2a 85       	ldd	r18, Y+10	; 0x0a
     b7c:	3b 85       	ldd	r19, Y+11	; 0x0b
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	3b 87       	std	Y+11, r19	; 0x0b
     b84:	2a 87       	std	Y+10, r18	; 0x0a
     b86:	e8 85       	ldd	r30, Y+8	; 0x08
     b88:	f9 85       	ldd	r31, Y+9	; 0x09
     b8a:	00 82       	st	Z, r0
     b8c:	28 85       	ldd	r18, Y+8	; 0x08
     b8e:	39 85       	ldd	r19, Y+9	; 0x09
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	39 87       	std	Y+9, r19	; 0x09
     b96:	28 87       	std	Y+8, r18	; 0x08
     b98:	3c 85       	ldd	r19, Y+12	; 0x0c
     b9a:	31 50       	subi	r19, 0x01	; 1
     b9c:	3c 87       	std	Y+12, r19	; 0x0c
     b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba0:	88 23       	and	r24, r24
     ba2:	41 f7       	brne	.-48     	; 0xb74 <main+0x2e>
	UART_init (&s_configuration);
     ba4:	ce 01       	movw	r24, r28
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	0e 94 dd 14 	call	0x29ba	; 0x29ba <UART_init>
	SET_BIT (SREG, 7);
     bac:	af e5       	ldi	r26, 0x5F	; 95
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ef e5       	ldi	r30, 0x5F	; 95
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	8c 93       	st	X, r24

	while(1)
	{
		//readPassword();

		switch (g_matchingFlag){
     bba:	80 91 ea 00 	lds	r24, 0x00EA
     bbe:	e8 2f       	mov	r30, r24
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ff 83       	std	Y+7, r31	; 0x07
     bc4:	ee 83       	std	Y+6, r30	; 0x06
     bc6:	2e 81       	ldd	r18, Y+6	; 0x06
     bc8:	3f 81       	ldd	r19, Y+7	; 0x07
     bca:	21 15       	cp	r18, r1
     bcc:	31 05       	cpc	r19, r1
     bce:	31 f0       	breq	.+12     	; 0xbdc <main+0x96>
     bd0:	8e 81       	ldd	r24, Y+6	; 0x06
     bd2:	9f 81       	ldd	r25, Y+7	; 0x07
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	91 05       	cpc	r25, r1
     bd8:	21 f0       	breq	.+8      	; 0xbe2 <main+0x9c>
     bda:	ef cf       	rjmp	.-34     	; 0xbba <main+0x74>
		     case WRONG_PASSWORD:  readPassword();              break;/*When there is no matching between new and confirmation passwords take new password again */
     bdc:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <readPassword>
     be0:	ec cf       	rjmp	.-40     	; 0xbba <main+0x74>
		     case CORRECT_PASSWORD: mainDisplay();  break;/* When the new pass and confirmation are matched start the system options*/
     be2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <mainDisplay>
     be6:	e9 cf       	rjmp	.-46     	; 0xbba <main+0x74>

00000be8 <readPassword>:

//
	}
	 return 0;
}
void readPassword(void){
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
/* The Password */
		LCD_clearScreen();
     bf0:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
		LCD_displayString ("Plz enter Pass:");
     bf4:	80 e6       	ldi	r24, 0x60	; 96
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
		LCD_moveCursor (1,0);
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>

		enterPassword();
     c04:	0e 94 1f 06 	call	0xc3e	; 0xc3e <enterPassword>

		/* The repeated password */
		LCD_clearScreen();
     c08:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
		LCD_displayString ("Plz re_enter the");
     c0c:	80 e7       	ldi	r24, 0x70	; 112
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
		LCD_moveCursor (1,0);
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
		LCD_displayString ("Same Pass:");
     c1c:	81 e8       	ldi	r24, 0x81	; 129
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
		LCD_moveCursor (1,10);
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	6a e0       	ldi	r22, 0x0A	; 10
     c28:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>

		enterPassword();
     c2c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <enterPassword>
		g_matchingFlag = UART_recieveByte();
     c30:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <UART_recieveByte>
     c34:	80 93 ea 00 	sts	0x00EA, r24
}
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <enterPassword>:
void enterPassword(void){
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	6d 97       	sbiw	r28, 0x1d	; 29
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     c56:	1d 8e       	std	Y+29, r1	; 0x1d
     c58:	91 c0       	rjmp	.+290    	; 0xd7c <enterPassword+0x13e>
		for (;i<5;i++)
			{
				g_password[i] = KEYPAD_getPressedKey ();// 3mlt check 3la eldosa abl ma a3rd ngom 3shan lw enter m3rdsh ngma bardo
     c5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c5c:	08 2f       	mov	r16, r24
     c5e:	10 e0       	ldi	r17, 0x00	; 0
     c60:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <KEYPAD_getPressedKey>
     c64:	f8 01       	movw	r30, r16
     c66:	ec 50       	subi	r30, 0x0C	; 12
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	80 83       	st	Z, r24

				if (g_password [i] == 13)/* ASCII of Enter */
     c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	fc 01       	movw	r30, r24
     c74:	ec 50       	subi	r30, 0x0C	; 12
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	80 81       	ld	r24, Z
     c7a:	8d 30       	cpi	r24, 0x0D	; 13
     c7c:	09 f4       	brne	.+2      	; 0xc80 <enterPassword+0x42>
     c7e:	82 c0       	rjmp	.+260    	; 0xd84 <enterPassword+0x146>
				{
					break;
				}
				LCD_displayCharacter(g_password[i]);
     c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	fc 01       	movw	r30, r24
     c88:	ec 50       	subi	r30, 0x0C	; 12
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	80 81       	ld	r24, Z
     c8e:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_displayCharacter>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a1 ee       	ldi	r26, 0xE1	; 225
     c98:	b3 e4       	ldi	r27, 0x43	; 67
     c9a:	89 8f       	std	Y+25, r24	; 0x19
     c9c:	9a 8f       	std	Y+26, r25	; 0x1a
     c9e:	ab 8f       	std	Y+27, r26	; 0x1b
     ca0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca2:	69 8d       	ldd	r22, Y+25	; 0x19
     ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	4a ef       	ldi	r20, 0xFA	; 250
     cb0:	54 e4       	ldi	r21, 0x44	; 68
     cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8d 8b       	std	Y+21, r24	; 0x15
     cbc:	9e 8b       	std	Y+22, r25	; 0x16
     cbe:	af 8b       	std	Y+23, r26	; 0x17
     cc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cc2:	6d 89       	ldd	r22, Y+21	; 0x15
     cc4:	7e 89       	ldd	r23, Y+22	; 0x16
     cc6:	8f 89       	ldd	r24, Y+23	; 0x17
     cc8:	98 8d       	ldd	r25, Y+24	; 0x18
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	2c f4       	brge	.+10     	; 0xce4 <enterPassword+0xa6>
		__ticks = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9c 8b       	std	Y+20, r25	; 0x14
     ce0:	8b 8b       	std	Y+19, r24	; 0x13
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <enterPassword+0x124>
	else if (__tmp > 65535)
     ce4:	6d 89       	ldd	r22, Y+21	; 0x15
     ce6:	7e 89       	ldd	r23, Y+22	; 0x16
     ce8:	8f 89       	ldd	r24, Y+23	; 0x17
     cea:	98 8d       	ldd	r25, Y+24	; 0x18
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	3f ef       	ldi	r19, 0xFF	; 255
     cf0:	4f e7       	ldi	r20, 0x7F	; 127
     cf2:	57 e4       	ldi	r21, 0x47	; 71
     cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf8:	18 16       	cp	r1, r24
     cfa:	4c f5       	brge	.+82     	; 0xd4e <enterPassword+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfc:	69 8d       	ldd	r22, Y+25	; 0x19
     cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e2       	ldi	r20, 0x20	; 32
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9c 8b       	std	Y+20, r25	; 0x14
     d22:	8b 8b       	std	Y+19, r24	; 0x13
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <enterPassword+0x106>
     d26:	88 ec       	ldi	r24, 0xC8	; 200
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9a 8b       	std	Y+18, r25	; 0x12
     d2c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d2e:	89 89       	ldd	r24, Y+17	; 0x11
     d30:	9a 89       	ldd	r25, Y+18	; 0x12
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <enterPassword+0xf4>
     d36:	9a 8b       	std	Y+18, r25	; 0x12
     d38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3a:	8b 89       	ldd	r24, Y+19	; 0x13
     d3c:	9c 89       	ldd	r25, Y+20	; 0x14
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	9c 8b       	std	Y+20, r25	; 0x14
     d42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d44:	8b 89       	ldd	r24, Y+19	; 0x13
     d46:	9c 89       	ldd	r25, Y+20	; 0x14
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	69 f7       	brne	.-38     	; 0xd26 <enterPassword+0xe8>
     d4c:	14 c0       	rjmp	.+40     	; 0xd76 <enterPassword+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4e:	6d 89       	ldd	r22, Y+21	; 0x15
     d50:	7e 89       	ldd	r23, Y+22	; 0x16
     d52:	8f 89       	ldd	r24, Y+23	; 0x17
     d54:	98 8d       	ldd	r25, Y+24	; 0x18
     d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9c 8b       	std	Y+20, r25	; 0x14
     d60:	8b 8b       	std	Y+19, r24	; 0x13
     d62:	8b 89       	ldd	r24, Y+19	; 0x13
     d64:	9c 89       	ldd	r25, Y+20	; 0x14
     d66:	98 8b       	std	Y+16, r25	; 0x10
     d68:	8f 87       	std	Y+15, r24	; 0x0f
     d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6c:	98 89       	ldd	r25, Y+16	; 0x10
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <enterPassword+0x130>
     d72:	98 8b       	std	Y+16, r25	; 0x10
     d74:	8f 87       	std	Y+15, r24	; 0x0f
		enterPassword();
		g_matchingFlag = UART_recieveByte();
}
void enterPassword(void){
	uint8 i=0;
		for (;i<5;i++)
     d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d78:	8f 5f       	subi	r24, 0xFF	; 255
     d7a:	8d 8f       	std	Y+29, r24	; 0x1d
     d7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d7e:	85 30       	cpi	r24, 0x05	; 5
     d80:	08 f4       	brcc	.+2      	; 0xd84 <enterPassword+0x146>
     d82:	6b cf       	rjmp	.-298    	; 0xc5a <enterPassword+0x1c>
					break;
				}
				LCD_displayCharacter(g_password[i]);
				_delay_ms (450);
			}
			g_password[i] = '#';				/* For UART_recieveString function */
     d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	fc 01       	movw	r30, r24
     d8c:	ec 50       	subi	r30, 0x0C	; 12
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	83 e2       	ldi	r24, 0x23	; 35
     d92:	80 83       	st	Z, r24
			g_password[i+1] = '\0';				/* For UART_sendString function */
     d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	fc 01       	movw	r30, r24
     d9e:	ec 50       	subi	r30, 0x0C	; 12
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	10 82       	st	Z, r1

			UART_sendString (g_password);/* Send the new password to control_ECU*/
     da4:	84 ef       	ldi	r24, 0xF4	; 244
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_sendString>
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	a0 e2       	ldi	r26, 0x20	; 32
     db2:	b1 e4       	ldi	r27, 0x41	; 65
     db4:	8b 87       	std	Y+11, r24	; 0x0b
     db6:	9c 87       	std	Y+12, r25	; 0x0c
     db8:	ad 87       	std	Y+13, r26	; 0x0d
     dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	4a ef       	ldi	r20, 0xFA	; 250
     dca:	54 e4       	ldi	r21, 0x44	; 68
     dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	8f 83       	std	Y+7, r24	; 0x07
     dd6:	98 87       	std	Y+8, r25	; 0x08
     dd8:	a9 87       	std	Y+9, r26	; 0x09
     dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ddc:	6f 81       	ldd	r22, Y+7	; 0x07
     dde:	78 85       	ldd	r23, Y+8	; 0x08
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	2c f4       	brge	.+10     	; 0xdfe <enterPassword+0x1c0>
		__ticks = 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9e 83       	std	Y+6, r25	; 0x06
     dfa:	8d 83       	std	Y+5, r24	; 0x05
     dfc:	3f c0       	rjmp	.+126    	; 0xe7c <enterPassword+0x23e>
	else if (__tmp > 65535)
     dfe:	6f 81       	ldd	r22, Y+7	; 0x07
     e00:	78 85       	ldd	r23, Y+8	; 0x08
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	3f ef       	ldi	r19, 0xFF	; 255
     e0a:	4f e7       	ldi	r20, 0x7F	; 127
     e0c:	57 e4       	ldi	r21, 0x47	; 71
     e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e12:	18 16       	cp	r1, r24
     e14:	4c f5       	brge	.+82     	; 0xe68 <enterPassword+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e16:	6b 85       	ldd	r22, Y+11	; 0x0b
     e18:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e2       	ldi	r20, 0x20	; 32
     e24:	51 e4       	ldi	r21, 0x41	; 65
     e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <enterPassword+0x220>
     e40:	88 ec       	ldi	r24, 0xC8	; 200
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	9c 83       	std	Y+4, r25	; 0x04
     e46:	8b 83       	std	Y+3, r24	; 0x03
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <enterPassword+0x20e>
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	9e 83       	std	Y+6, r25	; 0x06
     e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	69 f7       	brne	.-38     	; 0xe40 <enterPassword+0x202>
     e66:	14 c0       	rjmp	.+40     	; 0xe90 <enterPassword+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e68:	6f 81       	ldd	r22, Y+7	; 0x07
     e6a:	78 85       	ldd	r23, Y+8	; 0x08
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <enterPassword+0x24a>
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
     		_delay_ms (10);

}
     e90:	6d 96       	adiw	r28, 0x1d	; 29
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <timerCallBack_15Sec>:


void timerCallBack_15Sec (void)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <timerCallBack_15Sec+0x6>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	switch (g_matchingFlag)
     eb0:	80 91 ea 00 	lds	r24, 0x00EA
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3a 83       	std	Y+2, r19	; 0x02
     eba:	29 83       	std	Y+1, r18	; 0x01
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	84 36       	cpi	r24, 0x64	; 100
     ec2:	91 05       	cpc	r25, r1
     ec4:	31 f0       	breq	.+12     	; 0xed2 <timerCallBack_15Sec+0x2c>
     ec6:	29 81       	ldd	r18, Y+1	; 0x01
     ec8:	3a 81       	ldd	r19, Y+2	; 0x02
     eca:	25 36       	cpi	r18, 0x65	; 101
     ecc:	31 05       	cpc	r19, r1
     ece:	51 f0       	breq	.+20     	; 0xee4 <timerCallBack_15Sec+0x3e>
     ed0:	10 c0       	rjmp	.+32     	; 0xef2 <timerCallBack_15Sec+0x4c>
	{
	case 'd':
		Timer1_init (&s_timerConfigurations_3Sec); /* Start to count 3 seconds for door to start locking again */
     ed2:	89 ed       	ldi	r24, 0xD9	; 217
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 4b 14 	call	0x2896	; 0x2896 <Timer1_init>
		Timer1_setCallBack(timerCallBack_3Sec);   /* Set the second call back */
     eda:	8e e7       	ldi	r24, 0x7E	; 126
     edc:	97 e0       	ldi	r25, 0x07	; 7
     ede:	0e 94 cb 14 	call	0x2996	; 0x2996 <Timer1_setCallBack>
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <timerCallBack_15Sec+0x4c>
		break;
	case 'e':
		LCD_clearScreen();
     ee4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
		g_matchingFlag = CORRECT_PASSWORD;             /* For system main options */
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 ea 00 	sts	0x00EA, r24
		Timer1_deInit ();						   /* De_initialize the timer */
     eee:	0e 94 bd 14 	call	0x297a	; 0x297a <Timer1_deInit>
	}
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <timerCallBack_3Sec>:


void timerCallBack_3Sec (void)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	/* Display door is locking after being unlocked for 3 seconds */
	LCD_clearScreen();
     f04:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
	LCD_moveCursor (0,4);
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	64 e0       	ldi	r22, 0x04	; 4
     f0c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
	LCD_displayString ("Door is");
     f10:	8c e8       	ldi	r24, 0x8C	; 140
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
	LCD_moveCursor (1,4);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	64 e0       	ldi	r22, 0x04	; 4
     f1c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
	LCD_displayString ("Locking");
     f20:	84 e9       	ldi	r24, 0x94	; 148
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
	g_matchingFlag = 'e';
     f28:	85 e6       	ldi	r24, 0x65	; 101
     f2a:	80 93 ea 00 	sts	0x00EA, r24

	Timer1_init(&s_timerConfigurations_15Sec);  /* Start to count 15 seconds for door to be locked again */
     f2e:	83 ed       	ldi	r24, 0xD3	; 211
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 4b 14 	call	0x2896	; 0x2896 <Timer1_init>
	Timer1_setCallBack (timerCallBack_15Sec);	 /* Set the first call back */
     f36:	83 e5       	ldi	r24, 0x53	; 83
     f38:	97 e0       	ldi	r25, 0x07	; 7
     f3a:	0e 94 cb 14 	call	0x2996	; 0x2996 <Timer1_setCallBack>
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <timerCallBack_60Sec>:


void timerCallBack_60Sec (void)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
	Timer1_deInit();                    /* De_initialize the timer */
     f4c:	0e 94 bd 14 	call	0x297a	; 0x297a <Timer1_deInit>
	g_matchingFlag = CORRECT_PASSWORD;       /* For system main options */
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 ea 00 	sts	0x00EA, r24
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <mainDisplay>:
void mainDisplay (void)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	64 97       	sbiw	r28, 0x14	; 20
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61

	 static uint8 choice = 0;
	 static uint8 recieved = 0;/* Save the received confirmation byte from control_ECU */

	/* Print the main system options for first time and disable it for second and third password iterations */
if(recieved!=REPEAT_BYTE){
     f70:	80 91 eb 00 	lds	r24, 0x00EB
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	09 f4       	brne	.+2      	; 0xf7a <mainDisplay+0x1e>
     f78:	88 c0       	rjmp	.+272    	; 0x108a <mainDisplay+0x12e>
		LCD_clearScreen ();
     f7a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
		LCD_moveCursor (0,0);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
		LCD_displayString ("+ : OPEN DOOR");
     f86:	8c e9       	ldi	r24, 0x9C	; 156
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
		LCD_moveCursor (1,0);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
		LCD_displayString ("- : CHANGE PASS");
     f96:	8a ea       	ldi	r24, 0xAA	; 170
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>

		choice = KEYPAD_getPressedKey ();       /* Take the user choice either open door or change pass */
     f9e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <KEYPAD_getPressedKey>
     fa2:	80 93 ec 00 	sts	0x00EC, r24
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a6 e9       	ldi	r26, 0x96	; 150
     fac:	b3 e4       	ldi	r27, 0x43	; 67
     fae:	8b 87       	std	Y+11, r24	; 0x0b
     fb0:	9c 87       	std	Y+12, r25	; 0x0c
     fb2:	ad 87       	std	Y+13, r26	; 0x0d
     fb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fba:	8d 85       	ldd	r24, Y+13	; 0x0d
     fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a ef       	ldi	r20, 0xFA	; 250
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	8f 83       	std	Y+7, r24	; 0x07
     fd0:	98 87       	std	Y+8, r25	; 0x08
     fd2:	a9 87       	std	Y+9, r26	; 0x09
     fd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fd6:	6f 81       	ldd	r22, Y+7	; 0x07
     fd8:	78 85       	ldd	r23, Y+8	; 0x08
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <mainDisplay+0x9c>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <mainDisplay+0x11a>
	else if (__tmp > 65535)
     ff8:	6f 81       	ldd	r22, Y+7	; 0x07
     ffa:	78 85       	ldd	r23, Y+8	; 0x08
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <mainDisplay+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	6b 85       	ldd	r22, Y+11	; 0x0b
    1012:	7c 85       	ldd	r23, Y+12	; 0x0c
    1014:	8d 85       	ldd	r24, Y+13	; 0x0d
    1016:	9e 85       	ldd	r25, Y+14	; 0x0e
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9e 83       	std	Y+6, r25	; 0x06
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <mainDisplay+0xfc>
    103a:	88 ec       	ldi	r24, 0xC8	; 200
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9c 83       	std	Y+4, r25	; 0x04
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	9c 81       	ldd	r25, Y+4	; 0x04
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <mainDisplay+0xea>
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <mainDisplay+0xde>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <mainDisplay+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	6f 81       	ldd	r22, Y+7	; 0x07
    1064:	78 85       	ldd	r23, Y+8	; 0x08
    1066:	89 85       	ldd	r24, Y+9	; 0x09
    1068:	9a 85       	ldd	r25, Y+10	; 0x0a
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <mainDisplay+0x126>
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (300);
}
	switch (choice)
    108a:	80 91 ec 00 	lds	r24, 0x00EC
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	3c 8b       	std	Y+20, r19	; 0x14
    1094:	2b 8b       	std	Y+19, r18	; 0x13
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	8b 32       	cpi	r24, 0x2B	; 43
    109c:	91 05       	cpc	r25, r1
    109e:	39 f0       	breq	.+14     	; 0x10ae <mainDisplay+0x152>
    10a0:	2b 89       	ldd	r18, Y+19	; 0x13
    10a2:	3c 89       	ldd	r19, Y+20	; 0x14
    10a4:	2d 32       	cpi	r18, 0x2D	; 45
    10a6:	31 05       	cpc	r19, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <mainDisplay+0x150>
    10aa:	56 c0       	rjmp	.+172    	; 0x1158 <mainDisplay+0x1fc>
    10ac:	8d c0       	rjmp	.+282    	; 0x11c8 <mainDisplay+0x26c>
	{
	case '+':
		/* The Password */
		LCD_clearScreen();
    10ae:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
		LCD_displayString ("Plz enter Pass:");
    10b2:	80 e6       	ldi	r24, 0x60	; 96
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
		LCD_moveCursor (1,0);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>

		enterPassword();
    10c2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <enterPassword>

		recieved = UART_recieveByte();
    10c6:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <UART_recieveByte>
    10ca:	80 93 eb 00 	sts	0x00EB, r24
		/* based on the received if repeatPassword is confirmed, open the door.If wrong after 3 iterations, open the buzzer.*/
		switch (recieved)
    10ce:	80 91 eb 00 	lds	r24, 0x00EB
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	3a 8b       	std	Y+18, r19	; 0x12
    10d8:	29 8b       	std	Y+17, r18	; 0x11
    10da:	89 89       	ldd	r24, Y+17	; 0x11
    10dc:	9a 89       	ldd	r25, Y+18	; 0x12
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	41 f1       	breq	.+80     	; 0x1132 <mainDisplay+0x1d6>
    10e2:	29 89       	ldd	r18, Y+17	; 0x11
    10e4:	3a 89       	ldd	r19, Y+18	; 0x12
    10e6:	21 30       	cpi	r18, 0x01	; 1
    10e8:	31 05       	cpc	r19, r1
    10ea:	09 f0       	breq	.+2      	; 0x10ee <mainDisplay+0x192>
    10ec:	6d c0       	rjmp	.+218    	; 0x11c8 <mainDisplay+0x26c>
		{/*if two passwords are matched:
		• rotates motor for 15-seconds CW and display a message on the screen “Door is Unlocking”
		• hold the motor for 3-seconds.
		• rotates motor for 15-seconds A-CW and display a message on the screen “Door is Locking”*/
		case CORRECT_PASSWORD:
			UART_sendByte(choice);//to urt to control ECU
    10ee:	80 91 ec 00 	lds	r24, 0x00EC
    10f2:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <UART_sendByte>
			LCD_clearScreen();
    10f6:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
			LCD_moveCursor(0,5);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	65 e0       	ldi	r22, 0x05	; 5
    10fe:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
			LCD_displayString("Door is");
    1102:	8c e8       	ldi	r24, 0x8C	; 140
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
			LCD_moveCursor(1,4);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	64 e0       	ldi	r22, 0x04	; 4
    110e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
			LCD_displayString("Unlocking");
    1112:	8a eb       	ldi	r24, 0xBA	; 186
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>

			Timer1_setCallBack (timerCallBack_15Sec);
    111a:	83 e5       	ldi	r24, 0x53	; 83
    111c:	97 e0       	ldi	r25, 0x07	; 7
    111e:	0e 94 cb 14 	call	0x2996	; 0x2996 <Timer1_setCallBack>
			Timer1_init(&s_timerConfigurations_15Sec);
    1122:	83 ed       	ldi	r24, 0xD3	; 211
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 4b 14 	call	0x2896	; 0x2896 <Timer1_init>

			g_matchingFlag = 'd';
    112a:	84 e6       	ldi	r24, 0x64	; 100
    112c:	80 93 ea 00 	sts	0x00EA, r24
    1130:	4b c0       	rjmp	.+150    	; 0x11c8 <mainDisplay+0x26c>
			break;

		case WRONG_PASSWORD:
			Timer1_setCallBack (timerCallBack_60Sec);
    1132:	82 ea       	ldi	r24, 0xA2	; 162
    1134:	97 e0       	ldi	r25, 0x07	; 7
    1136:	0e 94 cb 14 	call	0x2996	; 0x2996 <Timer1_setCallBack>
			Timer1_init (&s_timerConfigurations_60Sec);
    113a:	8f ed       	ldi	r24, 0xDF	; 223
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 4b 14 	call	0x2896	; 0x2896 <Timer1_init>
			LCD_clearScreen ();
    1142:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
			LCD_moveCursor (0,5);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	65 e0       	ldi	r22, 0x05	; 5
    114a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
			LCD_displayString ("error!");
    114e:	84 ec       	ldi	r24, 0xC4	; 196
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
    1156:	38 c0       	rjmp	.+112    	; 0x11c8 <mainDisplay+0x26c>
		}
		break;

	case '-':
		/* The Password */
		LCD_clearScreen();
    1158:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
		LCD_displayString ("Plz enter Pass:");
    115c:	80 e6       	ldi	r24, 0x60	; 96
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
		LCD_moveCursor (1,0);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>

		enterPassword();
    116c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <enterPassword>

		recieved = UART_recieveByte();
    1170:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <UART_recieveByte>
    1174:	80 93 eb 00 	sts	0x00EB, r24

		/* based on the received if repeatPassword is confirmed, open the door.If wrong after 3 iterations, open the buzzer.*/
		switch (recieved)
    1178:	80 91 eb 00 	lds	r24, 0x00EB
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	38 8b       	std	Y+16, r19	; 0x10
    1182:	2f 87       	std	Y+15, r18	; 0x0f
    1184:	8f 85       	ldd	r24, Y+15	; 0x0f
    1186:	98 89       	ldd	r25, Y+16	; 0x10
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 f0       	breq	.+24     	; 0x11a4 <mainDisplay+0x248>
    118c:	2f 85       	ldd	r18, Y+15	; 0x0f
    118e:	38 89       	ldd	r19, Y+16	; 0x10
    1190:	21 30       	cpi	r18, 0x01	; 1
    1192:	31 05       	cpc	r19, r1
    1194:	c9 f4       	brne	.+50     	; 0x11c8 <mainDisplay+0x26c>
		{
		case CORRECT_PASSWORD:
			UART_sendByte (choice);
    1196:	80 91 ec 00 	lds	r24, 0x00EC
    119a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <UART_sendByte>
			g_matchingFlag = WRONG_PASSWORD;  /* to start to take new password */
    119e:	10 92 ea 00 	sts	0x00EA, r1
    11a2:	12 c0       	rjmp	.+36     	; 0x11c8 <mainDisplay+0x26c>
			break;

		case WRONG_PASSWORD:
			Timer1_setCallBack (timerCallBack_60Sec);
    11a4:	82 ea       	ldi	r24, 0xA2	; 162
    11a6:	97 e0       	ldi	r25, 0x07	; 7
    11a8:	0e 94 cb 14 	call	0x2996	; 0x2996 <Timer1_setCallBack>
			Timer1_init (&s_timerConfigurations_60Sec);
    11ac:	8f ed       	ldi	r24, 0xDF	; 223
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 4b 14 	call	0x2896	; 0x2896 <Timer1_init>
			LCD_clearScreen ();
    11b4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <LCD_clearScreen>
			LCD_moveCursor (0,5);
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	65 e0       	ldi	r22, 0x05	; 5
    11bc:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
			LCD_displayString ("error!");
    11c0:	84 ec       	ldi	r24, 0xC4	; 196
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
		}
	}
}
    11c8:	64 96       	adiw	r28, 0x14	; 20
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_setupPinDirection+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <GPIO_setupPinDirection+0x8>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
    11ec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <GPIO_setupPinDirection+0x1c>
    11f4:	d5 c0       	rjmp	.+426    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <GPIO_setupPinDirection+0x24>
    11fc:	d1 c0       	rjmp	.+418    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <GPIO_setupPinDirection+0x3a>
    1212:	43 c0       	rjmp	.+134    	; 0x129a <GPIO_setupPinDirection+0xc0>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <GPIO_setupPinDirection+0x4e>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	71 f0       	breq	.+28     	; 0x1242 <GPIO_setupPinDirection+0x68>
    1226:	bc c0       	rjmp	.+376    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <GPIO_setupPinDirection+0x5a>
    1232:	5f c0       	rjmp	.+190    	; 0x12f2 <GPIO_setupPinDirection+0x118>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <GPIO_setupPinDirection+0x66>
    123e:	85 c0       	rjmp	.+266    	; 0x134a <GPIO_setupPinDirection+0x170>
    1240:	af c0       	rjmp	.+350    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	a1 f4       	brne	.+40     	; 0x1270 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1248:	aa e3       	ldi	r26, 0x3A	; 58
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ea e3       	ldi	r30, 0x3A	; 58
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_setupPinDirection+0x8c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_setupPinDirection+0x88>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	98 c0       	rjmp	.+304    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1270:	aa e3       	ldi	r26, 0x3A	; 58
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ea e3       	ldi	r30, 0x3A	; 58
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <GPIO_setupPinDirection+0xb4>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <GPIO_setupPinDirection+0xb0>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	83 c0       	rjmp	.+262    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	a1 f4       	brne	.+40     	; 0x12c8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12a0:	a7 e3       	ldi	r26, 0x37	; 55
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e7 e3       	ldi	r30, 0x37	; 55
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_setupPinDirection+0xe4>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_setupPinDirection+0xe0>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	6c c0       	rjmp	.+216    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12c8:	a7 e3       	ldi	r26, 0x37	; 55
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e7 e3       	ldi	r30, 0x37	; 55
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_setupPinDirection+0x10c>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_setupPinDirection+0x108>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	57 c0       	rjmp	.+174    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	a1 f4       	brne	.+40     	; 0x1320 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12f8:	a4 e3       	ldi	r26, 0x34	; 52
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e4 e3       	ldi	r30, 0x34	; 52
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_setupPinDirection+0x13c>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_setupPinDirection+0x138>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	40 c0       	rjmp	.+128    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1320:	a4 e3       	ldi	r26, 0x34	; 52
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e4 e3       	ldi	r30, 0x34	; 52
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_setupPinDirection+0x164>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_setupPinDirection+0x160>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	2b c0       	rjmp	.+86     	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	a1 f4       	brne	.+40     	; 0x1378 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1350:	a1 e3       	ldi	r26, 0x31	; 49
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_setupPinDirection+0x194>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_setupPinDirection+0x190>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	14 c0       	rjmp	.+40     	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1378:	a1 e3       	ldi	r26, 0x31	; 49
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e1 e3       	ldi	r30, 0x31	; 49
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_setupPinDirection+0x1bc>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_setupPinDirection+0x1b8>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <GPIO_writePin+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_writePin+0x8>
    13b8:	0f 92       	push	r0
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	6a 83       	std	Y+2, r22	; 0x02
    13c2:	4b 83       	std	Y+3, r20	; 0x03
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	88 30       	cpi	r24, 0x08	; 8
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <GPIO_writePin+0x1c>
    13ca:	21 c2       	rjmp	.+1090   	; 0x180e <GPIO_writePin+0x45e>
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <GPIO_writePin+0x24>
    13d2:	1d c2       	rjmp	.+1082   	; 0x180e <GPIO_writePin+0x45e>
	{
		/* Do Nothing */
	}
	else{
         switch(port_num){
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3d 83       	std	Y+5, r19	; 0x05
    13dc:	2c 83       	std	Y+4, r18	; 0x04
    13de:	4c 81       	ldd	r20, Y+4	; 0x04
    13e0:	5d 81       	ldd	r21, Y+5	; 0x05
    13e2:	41 30       	cpi	r20, 0x01	; 1
    13e4:	51 05       	cpc	r21, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <GPIO_writePin+0x3a>
    13e8:	97 c0       	rjmp	.+302    	; 0x1518 <GPIO_writePin+0x168>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	91 05       	cpc	r25, r1
    13f2:	34 f4       	brge	.+12     	; 0x1400 <GPIO_writePin+0x50>
    13f4:	2c 81       	ldd	r18, Y+4	; 0x04
    13f6:	3d 81       	ldd	r19, Y+5	; 0x05
    13f8:	21 15       	cp	r18, r1
    13fa:	31 05       	cpc	r19, r1
    13fc:	71 f0       	breq	.+28     	; 0x141a <GPIO_writePin+0x6a>
    13fe:	07 c2       	rjmp	.+1038   	; 0x180e <GPIO_writePin+0x45e>
    1400:	4c 81       	ldd	r20, Y+4	; 0x04
    1402:	5d 81       	ldd	r21, Y+5	; 0x05
    1404:	42 30       	cpi	r20, 0x02	; 2
    1406:	51 05       	cpc	r21, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <GPIO_writePin+0x5c>
    140a:	05 c1       	rjmp	.+522    	; 0x1616 <GPIO_writePin+0x266>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <GPIO_writePin+0x68>
    1416:	7e c1       	rjmp	.+764    	; 0x1714 <GPIO_writePin+0x364>
    1418:	fa c1       	rjmp	.+1012   	; 0x180e <GPIO_writePin+0x45e>
        case PORTA_ID:
            if(!(DDRA&(1<<pin_num))){
    141a:	ea e3       	ldi	r30, 0x3A	; 58
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_writePin+0x82>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_writePin+0x7e>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	90 70       	andi	r25, 0x00	; 0
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	61 f5       	brne	.+88     	; 0x1498 <GPIO_writePin+0xe8>
            	if(value==LOGIC_HIGH){
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	a1 f4       	brne	.+40     	; 0x146e <GPIO_writePin+0xbe>
            	       SET_BIT(PORTA,pin_num);
    1446:	ab e3       	ldi	r26, 0x3B	; 59
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	eb e3       	ldi	r30, 0x3B	; 59
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_writePin+0xb4>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_writePin+0xb0>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	d0 c1       	rjmp	.+928    	; 0x180e <GPIO_writePin+0x45e>
            	   }
            	else{
            	     CLEAR_BIT(PORTA,pin_num);
    146e:	ab e3       	ldi	r26, 0x3B	; 59
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	eb e3       	ldi	r30, 0x3B	; 59
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <GPIO_writePin+0xdc>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <GPIO_writePin+0xd8>
    1490:	80 95       	com	r24
    1492:	84 23       	and	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	bb c1       	rjmp	.+886    	; 0x180e <GPIO_writePin+0x45e>
            	  }
            }
            else if((DDRA&(1<<pin_num))){
    1498:	ea e3       	ldi	r30, 0x3A	; 58
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <GPIO_writePin+0x100>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <GPIO_writePin+0xfc>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	90 70       	andi	r25, 0x00	; 0
    14ba:	88 23       	and	r24, r24
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <GPIO_writePin+0x110>
    14be:	a7 c1       	rjmp	.+846    	; 0x180e <GPIO_writePin+0x45e>

            	if(value==LOGIC_HIGH){
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	a1 f4       	brne	.+40     	; 0x14ee <GPIO_writePin+0x13e>
            	      SET_BIT(PORTA,pin_num);
    14c6:	ab e3       	ldi	r26, 0x3B	; 59
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	eb e3       	ldi	r30, 0x3B	; 59
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <GPIO_writePin+0x134>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <GPIO_writePin+0x130>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	90 c1       	rjmp	.+800    	; 0x180e <GPIO_writePin+0x45e>
            	   }
            	else{
            	    CLEAR_BIT(PORTA,pin_num);
    14ee:	ab e3       	ldi	r26, 0x3B	; 59
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	eb e3       	ldi	r30, 0x3B	; 59
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <GPIO_writePin+0x15c>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <GPIO_writePin+0x158>
    1510:	80 95       	com	r24
    1512:	84 23       	and	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	7b c1       	rjmp	.+758    	; 0x180e <GPIO_writePin+0x45e>
             }
            }
            break;
        case PORTB_ID:
        	if(!(DDRB&(1<<pin_num))){
    1518:	e7 e3       	ldi	r30, 0x37	; 55
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a9 01       	movw	r20, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <GPIO_writePin+0x180>
    152c:	55 95       	asr	r21
    152e:	47 95       	ror	r20
    1530:	8a 95       	dec	r24
    1532:	e2 f7       	brpl	.-8      	; 0x152c <GPIO_writePin+0x17c>
    1534:	ca 01       	movw	r24, r20
    1536:	81 70       	andi	r24, 0x01	; 1
    1538:	90 70       	andi	r25, 0x00	; 0
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	61 f5       	brne	.+88     	; 0x1596 <GPIO_writePin+0x1e6>
        	            	if(value==LOGIC_HIGH){
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	a1 f4       	brne	.+40     	; 0x156c <GPIO_writePin+0x1bc>
        	            	       SET_BIT(PORTB,pin_num);
    1544:	a8 e3       	ldi	r26, 0x38	; 56
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e3       	ldi	r30, 0x38	; 56
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <GPIO_writePin+0x1b2>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <GPIO_writePin+0x1ae>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	51 c1       	rjmp	.+674    	; 0x180e <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTB,pin_num);
    156c:	a8 e3       	ldi	r26, 0x38	; 56
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e8 e3       	ldi	r30, 0x38	; 56
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_writePin+0x1da>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_writePin+0x1d6>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	3c c1       	rjmp	.+632    	; 0x180e <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRB&(1<<pin_num))){
    1596:	e7 e3       	ldi	r30, 0x37	; 55
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <GPIO_writePin+0x1fe>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <GPIO_writePin+0x1fa>
    15b2:	ca 01       	movw	r24, r20
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	90 70       	andi	r25, 0x00	; 0
    15b8:	88 23       	and	r24, r24
    15ba:	09 f4       	brne	.+2      	; 0x15be <GPIO_writePin+0x20e>
    15bc:	28 c1       	rjmp	.+592    	; 0x180e <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	a1 f4       	brne	.+40     	; 0x15ec <GPIO_writePin+0x23c>
        	            	      SET_BIT(PORTB,pin_num);
    15c4:	a8 e3       	ldi	r26, 0x38	; 56
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <GPIO_writePin+0x232>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <GPIO_writePin+0x22e>
    15e6:	84 2b       	or	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	11 c1       	rjmp	.+546    	; 0x180e <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTB,pin_num);
    15ec:	a8 e3       	ldi	r26, 0x38	; 56
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e8 e3       	ldi	r30, 0x38	; 56
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <GPIO_writePin+0x25a>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <GPIO_writePin+0x256>
    160e:	80 95       	com	r24
    1610:	84 23       	and	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	fc c0       	rjmp	.+504    	; 0x180e <GPIO_writePin+0x45e>
        	             }
        	            }
            break;
        case PORTC_ID:
        	if(!(DDRC&(1<<pin_num))){
    1616:	e4 e3       	ldi	r30, 0x34	; 52
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <GPIO_writePin+0x27e>
    162a:	55 95       	asr	r21
    162c:	47 95       	ror	r20
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <GPIO_writePin+0x27a>
    1632:	ca 01       	movw	r24, r20
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	90 70       	andi	r25, 0x00	; 0
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 f5       	brne	.+88     	; 0x1694 <GPIO_writePin+0x2e4>
        	            	if(value==LOGIC_HIGH){
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	a1 f4       	brne	.+40     	; 0x166a <GPIO_writePin+0x2ba>
        	            	       SET_BIT(PORTC,pin_num);
    1642:	a5 e3       	ldi	r26, 0x35	; 53
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <GPIO_writePin+0x2b0>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <GPIO_writePin+0x2ac>
    1664:	84 2b       	or	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	d2 c0       	rjmp	.+420    	; 0x180e <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTC,pin_num);
    166a:	a5 e3       	ldi	r26, 0x35	; 53
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <GPIO_writePin+0x2d8>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <GPIO_writePin+0x2d4>
    168c:	80 95       	com	r24
    168e:	84 23       	and	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	bd c0       	rjmp	.+378    	; 0x180e <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRC&(1<<pin_num))){
    1694:	e4 e3       	ldi	r30, 0x34	; 52
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <GPIO_writePin+0x2fc>
    16a8:	55 95       	asr	r21
    16aa:	47 95       	ror	r20
    16ac:	8a 95       	dec	r24
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <GPIO_writePin+0x2f8>
    16b0:	ca 01       	movw	r24, r20
    16b2:	81 70       	andi	r24, 0x01	; 1
    16b4:	90 70       	andi	r25, 0x00	; 0
    16b6:	88 23       	and	r24, r24
    16b8:	09 f4       	brne	.+2      	; 0x16bc <GPIO_writePin+0x30c>
    16ba:	a9 c0       	rjmp	.+338    	; 0x180e <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	a1 f4       	brne	.+40     	; 0x16ea <GPIO_writePin+0x33a>
        	            	      SET_BIT(PORTC,pin_num);
    16c2:	a5 e3       	ldi	r26, 0x35	; 53
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e3       	ldi	r30, 0x35	; 53
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <GPIO_writePin+0x330>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <GPIO_writePin+0x32c>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	92 c0       	rjmp	.+292    	; 0x180e <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTC,pin_num);
    16ea:	a5 e3       	ldi	r26, 0x35	; 53
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e3       	ldi	r30, 0x35	; 53
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_writePin+0x358>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <GPIO_writePin+0x354>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	7d c0       	rjmp	.+250    	; 0x180e <GPIO_writePin+0x45e>
        	             }
        	            }
            break;
        case PORTD_ID:
        	if(!(DDRD&(1<<pin_num))){
    1714:	e1 e3       	ldi	r30, 0x31	; 49
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <GPIO_writePin+0x37c>
    1728:	55 95       	asr	r21
    172a:	47 95       	ror	r20
    172c:	8a 95       	dec	r24
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <GPIO_writePin+0x378>
    1730:	ca 01       	movw	r24, r20
    1732:	81 70       	andi	r24, 0x01	; 1
    1734:	90 70       	andi	r25, 0x00	; 0
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	61 f5       	brne	.+88     	; 0x1792 <GPIO_writePin+0x3e2>
        	            	if(value==LOGIC_HIGH){
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	a1 f4       	brne	.+40     	; 0x1768 <GPIO_writePin+0x3b8>
        	            	       SET_BIT(PORTD,pin_num);
    1740:	a2 e3       	ldi	r26, 0x32	; 50
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e2 e3       	ldi	r30, 0x32	; 50
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_writePin+0x3ae>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_writePin+0x3aa>
    1762:	84 2b       	or	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	53 c0       	rjmp	.+166    	; 0x180e <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	     CLEAR_BIT(PORTD,pin_num);
    1768:	a2 e3       	ldi	r26, 0x32	; 50
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e2 e3       	ldi	r30, 0x32	; 50
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_writePin+0x3d6>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_writePin+0x3d2>
    178a:	80 95       	com	r24
    178c:	84 23       	and	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	3e c0       	rjmp	.+124    	; 0x180e <GPIO_writePin+0x45e>
        	            	  }
        	            }
        	            else if((DDRD&(1<<pin_num))){
    1792:	e1 e3       	ldi	r30, 0x31	; 49
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a9 01       	movw	r20, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <GPIO_writePin+0x3fa>
    17a6:	55 95       	asr	r21
    17a8:	47 95       	ror	r20
    17aa:	8a 95       	dec	r24
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <GPIO_writePin+0x3f6>
    17ae:	ca 01       	movw	r24, r20
    17b0:	81 70       	andi	r24, 0x01	; 1
    17b2:	90 70       	andi	r25, 0x00	; 0
    17b4:	88 23       	and	r24, r24
    17b6:	59 f1       	breq	.+86     	; 0x180e <GPIO_writePin+0x45e>

        	            	if(value==LOGIC_HIGH){
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	a1 f4       	brne	.+40     	; 0x17e6 <GPIO_writePin+0x436>
        	            	      SET_BIT(PORTD,pin_num);
    17be:	a2 e3       	ldi	r26, 0x32	; 50
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e2 e3       	ldi	r30, 0x32	; 50
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <GPIO_writePin+0x42c>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <GPIO_writePin+0x428>
    17e0:	84 2b       	or	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <GPIO_writePin+0x45e>
        	            	   }
        	            	else{
        	            	    CLEAR_BIT(PORTD,pin_num);
    17e6:	a2 e3       	ldi	r26, 0x32	; 50
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e2 e3       	ldi	r30, 0x32	; 50
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <GPIO_writePin+0x454>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <GPIO_writePin+0x450>
    1808:	80 95       	com	r24
    180a:	84 23       	and	r24, r20
    180c:	8c 93       	st	X, r24
        	             }
        	            }
            break;
      }
	}
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_readPin+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <GPIO_readPin+0x8>
    1826:	00 d0       	rcall	.+0      	; 0x1828 <GPIO_readPin+0xa>
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	6a 83       	std	Y+2, r22	; 0x02
    if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	88 30       	cpi	r24, 0x08	; 8
    1834:	18 f4       	brcc	.+6      	; 0x183c <GPIO_readPin+0x1e>
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	10 f0       	brcs	.+4      	; 0x1840 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    183c:	1d 82       	std	Y+5, r1	; 0x05
    183e:	9b c0       	rjmp	.+310    	; 0x1976 <GPIO_readPin+0x158>
	}
	else{
        switch(port_num){
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3c 83       	std	Y+4, r19	; 0x04
    1848:	2b 83       	std	Y+3, r18	; 0x03
    184a:	4b 81       	ldd	r20, Y+3	; 0x03
    184c:	5c 81       	ldd	r21, Y+4	; 0x04
    184e:	41 30       	cpi	r20, 0x01	; 1
    1850:	51 05       	cpc	r21, r1
    1852:	b1 f1       	breq	.+108    	; 0x18c0 <GPIO_readPin+0xa2>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	82 30       	cpi	r24, 0x02	; 2
    185a:	91 05       	cpc	r25, r1
    185c:	34 f4       	brge	.+12     	; 0x186a <GPIO_readPin+0x4c>
    185e:	2b 81       	ldd	r18, Y+3	; 0x03
    1860:	3c 81       	ldd	r19, Y+4	; 0x04
    1862:	21 15       	cp	r18, r1
    1864:	31 05       	cpc	r19, r1
    1866:	71 f0       	breq	.+28     	; 0x1884 <GPIO_readPin+0x66>
    1868:	85 c0       	rjmp	.+266    	; 0x1974 <GPIO_readPin+0x156>
    186a:	4b 81       	ldd	r20, Y+3	; 0x03
    186c:	5c 81       	ldd	r21, Y+4	; 0x04
    186e:	42 30       	cpi	r20, 0x02	; 2
    1870:	51 05       	cpc	r21, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <GPIO_readPin+0x58>
    1874:	43 c0       	rjmp	.+134    	; 0x18fc <GPIO_readPin+0xde>
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <GPIO_readPin+0x64>
    1880:	5b c0       	rjmp	.+182    	; 0x1938 <GPIO_readPin+0x11a>
    1882:	78 c0       	rjmp	.+240    	; 0x1974 <GPIO_readPin+0x156>
                case PORTA_ID:return (PINA&(1<<pin_num))>>pin_num;break;
    1884:	e9 e3       	ldi	r30, 0x39	; 57
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_readPin+0x80>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	2a 95       	dec	r18
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_readPin+0x7c>
    18a2:	9a 01       	movw	r18, r20
    18a4:	28 23       	and	r18, r24
    18a6:	39 23       	and	r19, r25
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a9 01       	movw	r20, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <GPIO_readPin+0x98>
    18b2:	55 95       	asr	r21
    18b4:	47 95       	ror	r20
    18b6:	8a 95       	dec	r24
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <GPIO_readPin+0x94>
    18ba:	ca 01       	movw	r24, r20
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	5b c0       	rjmp	.+182    	; 0x1976 <GPIO_readPin+0x158>
                case PORTB_ID:return (PINB&(1<<pin_num))>>pin_num;break;
    18c0:	e6 e3       	ldi	r30, 0x36	; 54
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GPIO_readPin+0xbc>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	2a 95       	dec	r18
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <GPIO_readPin+0xb8>
    18de:	9a 01       	movw	r18, r20
    18e0:	28 23       	and	r18, r24
    18e2:	39 23       	and	r19, r25
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a9 01       	movw	r20, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <GPIO_readPin+0xd4>
    18ee:	55 95       	asr	r21
    18f0:	47 95       	ror	r20
    18f2:	8a 95       	dec	r24
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <GPIO_readPin+0xd0>
    18f6:	ca 01       	movw	r24, r20
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	3d c0       	rjmp	.+122    	; 0x1976 <GPIO_readPin+0x158>
                case PORTC_ID:return (PINC&(1<<pin_num))>>pin_num;break;
    18fc:	e3 e3       	ldi	r30, 0x33	; 51
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <GPIO_readPin+0xf8>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	2a 95       	dec	r18
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <GPIO_readPin+0xf4>
    191a:	9a 01       	movw	r18, r20
    191c:	28 23       	and	r18, r24
    191e:	39 23       	and	r19, r25
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a9 01       	movw	r20, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_readPin+0x110>
    192a:	55 95       	asr	r21
    192c:	47 95       	ror	r20
    192e:	8a 95       	dec	r24
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_readPin+0x10c>
    1932:	ca 01       	movw	r24, r20
    1934:	8d 83       	std	Y+5, r24	; 0x05
    1936:	1f c0       	rjmp	.+62     	; 0x1976 <GPIO_readPin+0x158>
                case PORTD_ID:return (PIND&(1<<pin_num))>>pin_num;break;
    1938:	e0 e3       	ldi	r30, 0x30	; 48
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <GPIO_readPin+0x134>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	2a 95       	dec	r18
    1954:	e2 f7       	brpl	.-8      	; 0x194e <GPIO_readPin+0x130>
    1956:	9a 01       	movw	r18, r20
    1958:	28 23       	and	r18, r24
    195a:	39 23       	and	r19, r25
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a9 01       	movw	r20, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <GPIO_readPin+0x14c>
    1966:	55 95       	asr	r21
    1968:	47 95       	ror	r20
    196a:	8a 95       	dec	r24
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <GPIO_readPin+0x148>
    196e:	ca 01       	movw	r24, r20
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <GPIO_readPin+0x158>
    1974:	02 c0       	rjmp	.+4      	; 0x197a <GPIO_readPin+0x15c>
            }
	}
}
    1976:	5d 81       	ldd	r21, Y+5	; 0x05
    1978:	5e 83       	std	Y+6, r21	; 0x06
    197a:	8e 81       	ldd	r24, Y+6	; 0x06
    197c:	26 96       	adiw	r28, 0x06	; 6
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <GPIO_setupPortDirection+0x6>
    1994:	00 d0       	rcall	.+0      	; 0x1996 <GPIO_setupPortDirection+0x8>
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	84 30       	cpi	r24, 0x04	; 4
    19a2:	90 f5       	brcc	.+100    	; 0x1a08 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	3c 83       	std	Y+4, r19	; 0x04
    19ac:	2b 83       	std	Y+3, r18	; 0x03
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 05       	cpc	r25, r1
    19b6:	d1 f0       	breq	.+52     	; 0x19ec <GPIO_setupPortDirection+0x5e>
    19b8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ba:	3c 81       	ldd	r19, Y+4	; 0x04
    19bc:	22 30       	cpi	r18, 0x02	; 2
    19be:	31 05       	cpc	r19, r1
    19c0:	2c f4       	brge	.+10     	; 0x19cc <GPIO_setupPortDirection+0x3e>
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	61 f0       	breq	.+24     	; 0x19e2 <GPIO_setupPortDirection+0x54>
    19ca:	1e c0       	rjmp	.+60     	; 0x1a08 <GPIO_setupPortDirection+0x7a>
    19cc:	2b 81       	ldd	r18, Y+3	; 0x03
    19ce:	3c 81       	ldd	r19, Y+4	; 0x04
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	81 f0       	breq	.+32     	; 0x19f6 <GPIO_setupPortDirection+0x68>
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	83 30       	cpi	r24, 0x03	; 3
    19dc:	91 05       	cpc	r25, r1
    19de:	81 f0       	breq	.+32     	; 0x1a00 <GPIO_setupPortDirection+0x72>
    19e0:	13 c0       	rjmp	.+38     	; 0x1a08 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19e2:	ea e3       	ldi	r30, 0x3A	; 58
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	80 83       	st	Z, r24
    19ea:	0e c0       	rjmp	.+28     	; 0x1a08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19ec:	e7 e3       	ldi	r30, 0x37	; 55
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	80 83       	st	Z, r24
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19f6:	e4 e3       	ldi	r30, 0x34	; 52
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	80 83       	st	Z, r24
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a00:	e1 e3       	ldi	r30, 0x31	; 49
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <GPIO_writePort+0x6>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <GPIO_writePort+0x8>
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	84 30       	cpi	r24, 0x04	; 4
    1a2a:	90 f5       	brcc	.+100    	; 0x1a90 <GPIO_writePort+0x7a>
			{

			}
		else{
        switch(port_num){
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3c 83       	std	Y+4, r19	; 0x04
    1a34:	2b 83       	std	Y+3, r18	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	d1 f0       	breq	.+52     	; 0x1a74 <GPIO_writePort+0x5e>
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	3c 81       	ldd	r19, Y+4	; 0x04
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <GPIO_writePort+0x3e>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	61 f0       	breq	.+24     	; 0x1a6a <GPIO_writePort+0x54>
    1a52:	1e c0       	rjmp	.+60     	; 0x1a90 <GPIO_writePort+0x7a>
    1a54:	2b 81       	ldd	r18, Y+3	; 0x03
    1a56:	3c 81       	ldd	r19, Y+4	; 0x04
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	81 f0       	breq	.+32     	; 0x1a7e <GPIO_writePort+0x68>
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	91 05       	cpc	r25, r1
    1a66:	81 f0       	breq	.+32     	; 0x1a88 <GPIO_writePort+0x72>
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <GPIO_writePort+0x7a>
                case PORTA_ID: PORTA= value;break;
    1a6a:	eb e3       	ldi	r30, 0x3B	; 59
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	80 83       	st	Z, r24
    1a72:	0e c0       	rjmp	.+28     	; 0x1a90 <GPIO_writePort+0x7a>
                case PORTB_ID: PORTB= value;break;
    1a74:	e8 e3       	ldi	r30, 0x38	; 56
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	80 83       	st	Z, r24
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <GPIO_writePort+0x7a>
                case PORTC_ID: PORTC= value;break;
    1a7e:	e5 e3       	ldi	r30, 0x35	; 53
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	80 83       	st	Z, r24
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <GPIO_writePort+0x7a>
                case PORTD_ID: PORTD= value;break;
    1a88:	e2 e3       	ldi	r30, 0x32	; 50
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	80 83       	st	Z, r24
        }    }
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <GPIO_readPort+0x6>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <GPIO_readPort+0x8>
    1aa6:	0f 92       	push	r0
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	89 83       	std	Y+1, r24	; 0x01
	if((port_num >= NUM_OF_PORTS))
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	10 f0       	brcs	.+4      	; 0x1ab8 <GPIO_readPort+0x1a>
		{
			return LOGIC_LOW;
    1ab4:	1c 82       	std	Y+4, r1	; 0x04
    1ab6:	34 c0       	rjmp	.+104    	; 0x1b20 <GPIO_readPort+0x82>
		}
	else{
        switch(port_num){
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	3b 83       	std	Y+3, r19	; 0x03
    1ac0:	2a 83       	std	Y+2, r18	; 0x02
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	d1 f0       	breq	.+52     	; 0x1b00 <GPIO_readPort+0x62>
    1acc:	2a 81       	ldd	r18, Y+2	; 0x02
    1ace:	3b 81       	ldd	r19, Y+3	; 0x03
    1ad0:	22 30       	cpi	r18, 0x02	; 2
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <GPIO_readPort+0x42>
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	61 f0       	breq	.+24     	; 0x1af6 <GPIO_readPort+0x58>
    1ade:	1f c0       	rjmp	.+62     	; 0x1b1e <GPIO_readPort+0x80>
    1ae0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <GPIO_readPort+0x6c>
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	9b 81       	ldd	r25, Y+3	; 0x03
    1aee:	83 30       	cpi	r24, 0x03	; 3
    1af0:	91 05       	cpc	r25, r1
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <GPIO_readPort+0x76>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <GPIO_readPort+0x80>
                case PORTA_ID:return PINA;break;
    1af6:	e9 e3       	ldi	r30, 0x39	; 57
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	90 81       	ld	r25, Z
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	10 c0       	rjmp	.+32     	; 0x1b20 <GPIO_readPort+0x82>
                case PORTB_ID:return PINB;break;
    1b00:	e6 e3       	ldi	r30, 0x36	; 54
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	20 81       	ld	r18, Z
    1b06:	2c 83       	std	Y+4, r18	; 0x04
    1b08:	0b c0       	rjmp	.+22     	; 0x1b20 <GPIO_readPort+0x82>
                case PORTC_ID:return PINC;break;
    1b0a:	e3 e3       	ldi	r30, 0x33	; 51
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	30 81       	ld	r19, Z
    1b10:	3c 83       	std	Y+4, r19	; 0x04
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <GPIO_readPort+0x82>
                case PORTD_ID:return PIND;break;
    1b14:	e0 e3       	ldi	r30, 0x30	; 48
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	8c 83       	std	Y+4, r24	; 0x04
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <GPIO_readPort+0x82>
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_readPort+0x86>
            }
}}
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	9d 83       	std	Y+5, r25	; 0x05
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <KEYPAD_getPressedKey+0x6>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	63 e0       	ldi	r22, 0x03	; 3
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>

	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	62 e0       	ldi	r22, 0x02	; 2
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	63 e0       	ldi	r22, 0x03	; 3
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	64 e0       	ldi	r22, 0x04	; 4
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	65 e0       	ldi	r22, 0x05	; 5
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	66 e0       	ldi	r22, 0x06	; 6
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	67 e0       	ldi	r22, 0x07	; 7
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1bb8:	19 82       	std	Y+1, r1	; 0x01
    1bba:	30 c0       	rjmp	.+96     	; 0x1c1c <KEYPAD_getPressedKey+0xe6>
		{
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	69 81       	ldd	r22, Y+1	; 0x01
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1bc6:	1a 82       	std	Y+2, r1	; 0x02
    1bc8:	1e c0       	rjmp	.+60     	; 0x1c06 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	98 2f       	mov	r25, r24
    1bce:	9c 5f       	subi	r25, 0xFC	; 252
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	69 2f       	mov	r22, r25
    1bd4:	0e 94 0f 0c 	call	0x181e	; 0x181e <GPIO_readPin>
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	91 f4       	brne	.+36     	; 0x1c00 <KEYPAD_getPressedKey+0xca>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	98 2f       	mov	r25, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	89 0f       	add	r24, r25
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		}
	}
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
		{
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	f8 f2       	brcs	.-66     	; 0x1bca <KEYPAD_getPressedKey+0x94>
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
				}
			}
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	69 81       	ldd	r22, Y+1	; 0x01
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	68 f2       	brcs	.-102    	; 0x1bbc <KEYPAD_getPressedKey+0x86>
    1c22:	ca cf       	rjmp	.-108    	; 0x1bb8 <KEYPAD_getPressedKey+0x82>

00001c24 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c32:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3c 83       	std	Y+4, r19	; 0x04
    1c3c:	2b 83       	std	Y+3, r18	; 0x03
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	88 30       	cpi	r24, 0x08	; 8
    1c44:	91 05       	cpc	r25, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c48:	70 c0       	rjmp	.+224    	; 0x1d2a <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	29 30       	cpi	r18, 0x09	; 9
    1c50:	31 05       	cpc	r19, r1
    1c52:	5c f5       	brge	.+86     	; 0x1caa <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	84 30       	cpi	r24, 0x04	; 4
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c5e:	59 c0       	rjmp	.+178    	; 0x1d12 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c60:	2b 81       	ldd	r18, Y+3	; 0x03
    1c62:	3c 81       	ldd	r19, Y+4	; 0x04
    1c64:	25 30       	cpi	r18, 0x05	; 5
    1c66:	31 05       	cpc	r19, r1
    1c68:	9c f4       	brge	.+38     	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	91 05       	cpc	r25, r1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c74:	48 c0       	rjmp	.+144    	; 0x1d06 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c76:	2b 81       	ldd	r18, Y+3	; 0x03
    1c78:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7a:	23 30       	cpi	r18, 0x03	; 3
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	0c f0       	brlt	.+2      	; 0x1c82 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c80:	45 c0       	rjmp	.+138    	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c8c:	39 c0       	rjmp	.+114    	; 0x1d00 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c8e:	68 c0       	rjmp	.+208    	; 0x1d60 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1c90:	2b 81       	ldd	r18, Y+3	; 0x03
    1c92:	3c 81       	ldd	r19, Y+4	; 0x04
    1c94:	26 30       	cpi	r18, 0x06	; 6
    1c96:	31 05       	cpc	r19, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c9a:	41 c0       	rjmp	.+130    	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	87 30       	cpi	r24, 0x07	; 7
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1ca6:	3e c0       	rjmp	.+124    	; 0x1d24 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1ca8:	37 c0       	rjmp	.+110    	; 0x1d18 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1caa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cac:	3c 81       	ldd	r19, Y+4	; 0x04
    1cae:	2c 30       	cpi	r18, 0x0C	; 12
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1cb4:	46 c0       	rjmp	.+140    	; 0x1d42 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	8d 30       	cpi	r24, 0x0D	; 13
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	5c f4       	brge	.+22     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc4:	2a 30       	cpi	r18, 0x0A	; 10
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	b1 f1       	breq	.+108    	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	8b 30       	cpi	r24, 0x0B	; 11
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	a4 f5       	brge	.+104    	; 0x1d3c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1cd4:	2d c0       	rjmp	.+90     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cda:	2e 30       	cpi	r18, 0x0E	; 14
    1cdc:	31 05       	cpc	r19, r1
    1cde:	b9 f1       	breq	.+110    	; 0x1d4e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	8e 30       	cpi	r24, 0x0E	; 14
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	7c f1       	brlt	.+94     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	2f 30       	cpi	r18, 0x0F	; 15
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	81 f1       	breq	.+96     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x130>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	80 31       	cpi	r24, 0x10	; 16
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	71 f1       	breq	.+92     	; 0x1d5a <KEYPAD_4x4_adjustKeyNumber+0x136>
    1cfe:	30 c0       	rjmp	.+96     	; 0x1d60 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
	case 1: keypad_button = '7';
    1d00:	87 e3       	ldi	r24, 0x37	; 55
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	2f c0       	rjmp	.+94     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 2: keypad_button = '8';
    1d06:	88 e3       	ldi	r24, 0x38	; 56
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	2c c0       	rjmp	.+88     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 3: keypad_button = '9';
    1d0c:	89 e3       	ldi	r24, 0x39	; 57
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	29 c0       	rjmp	.+82     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    1d12:	85 e2       	ldi	r24, 0x25	; 37
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	26 c0       	rjmp	.+76     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 5: keypad_button = '4';
    1d18:	84 e3       	ldi	r24, 0x34	; 52
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	23 c0       	rjmp	.+70     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 6: keypad_button = '5';
    1d1e:	85 e3       	ldi	r24, 0x35	; 53
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	20 c0       	rjmp	.+64     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 7: keypad_button = '6';
    1d24:	86 e3       	ldi	r24, 0x36	; 54
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	1d c0       	rjmp	.+58     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d2a:	8a e2       	ldi	r24, 0x2A	; 42
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	1a c0       	rjmp	.+52     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 9: keypad_button = '1';
    1d30:	81 e3       	ldi	r24, 0x31	; 49
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	17 c0       	rjmp	.+46     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 10: keypad_button = '2';
    1d36:	82 e3       	ldi	r24, 0x32	; 50
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 11: keypad_button = '3';
    1d3c:	83 e3       	ldi	r24, 0x33	; 51
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	11 c0       	rjmp	.+34     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d42:	8d e2       	ldi	r24, 0x2D	; 45
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	0e c0       	rjmp	.+28     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    1d48:	8d e0       	ldi	r24, 0x0D	; 13
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	0b c0       	rjmp	.+22     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 14: keypad_button = '0';
    1d4e:	80 e3       	ldi	r24, 0x30	; 48
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	08 c0       	rjmp	.+16     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d54:	8d e3       	ldi	r24, 0x3D	; 61
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	05 c0       	rjmp	.+10     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d5a:	8b e2       	ldi	r24, 0x2B	; 43
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
	break;
	default: keypad_button = button_number;
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	2e 97       	sbiw	r28, 0x0e	; 14
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	62 e0       	ldi	r22, 0x02	; 2
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a0 ea       	ldi	r26, 0xA0	; 160
    1da2:	b1 e4       	ldi	r27, 0x41	; 65
    1da4:	8b 87       	std	Y+11, r24	; 0x0b
    1da6:	9c 87       	std	Y+12, r25	; 0x0c
    1da8:	ad 87       	std	Y+13, r26	; 0x0d
    1daa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a ef       	ldi	r20, 0xFA	; 250
    1dba:	54 e4       	ldi	r21, 0x44	; 68
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8f 83       	std	Y+7, r24	; 0x07
    1dc6:	98 87       	std	Y+8, r25	; 0x08
    1dc8:	a9 87       	std	Y+9, r26	; 0x09
    1dca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dce:	78 85       	ldd	r23, Y+8	; 0x08
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	2c f4       	brge	.+10     	; 0x1dee <LCD_init+0x7a>
		__ticks = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
    1dec:	3f c0       	rjmp	.+126    	; 0x1e6c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	4c f5       	brge	.+82     	; 0x1e58 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e2       	ldi	r20, 0x20	; 32
    1e14:	51 e4       	ldi	r21, 0x41	; 65
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <LCD_init+0xda>
    1e30:	88 ec       	ldi	r24, 0xC8	; 200
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	8b 83       	std	Y+3, r24	; 0x03
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_init+0xc8>
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	69 f7       	brne	.-38     	; 0x1e30 <LCD_init+0xbc>
    1e56:	14 c0       	rjmp	.+40     	; 0x1e80 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5a:	78 85       	ldd	r23, Y+8	; 0x08
    1e5c:	89 85       	ldd	r24, Y+9	; 0x09
    1e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	9a 81       	ldd	r25, Y+2	; 0x02
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_init+0x104>
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	6f ef       	ldi	r22, 0xFF	; 255
    1e84:	0e 94 c7 0c 	call	0x198e	; 0x198e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1e88:	88 e3       	ldi	r24, 0x38	; 56
    1e8a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e8e:	8c e0       	ldi	r24, 0x0C	; 12
    1e90:	0e 94 56 0f 	call	0x1eac	; 0x1eac <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	0e 94 56 0f 	call	0x1eac	; 0x1eac <LCD_sendCommand>
}
    1e9a:	2e 96       	adiw	r28, 0x0e	; 14
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	e9 97       	sbiw	r28, 0x39	; 57
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e8       	ldi	r26, 0x80	; 128
    1ed2:	bf e3       	ldi	r27, 0x3F	; 63
    1ed4:	8d ab       	std	Y+53, r24	; 0x35
    1ed6:	9e ab       	std	Y+54, r25	; 0x36
    1ed8:	af ab       	std	Y+55, r26	; 0x37
    1eda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ede:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	89 ab       	std	Y+49, r24	; 0x31
    1ef6:	9a ab       	std	Y+50, r25	; 0x32
    1ef8:	ab ab       	std	Y+51, r26	; 0x33
    1efa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1efc:	69 a9       	ldd	r22, Y+49	; 0x31
    1efe:	7a a9       	ldd	r23, Y+50	; 0x32
    1f00:	8b a9       	ldd	r24, Y+51	; 0x33
    1f02:	9c a9       	ldd	r25, Y+52	; 0x34
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <LCD_sendCommand+0x72>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	98 ab       	std	Y+48, r25	; 0x30
    1f1a:	8f a7       	std	Y+47, r24	; 0x2f
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1f1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f20:	7a a9       	ldd	r23, Y+50	; 0x32
    1f22:	8b a9       	ldd	r24, Y+51	; 0x33
    1f24:	9c a9       	ldd	r25, Y+52	; 0x34
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6d a9       	ldd	r22, Y+53	; 0x35
    1f38:	7e a9       	ldd	r23, Y+54	; 0x36
    1f3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	98 ab       	std	Y+48, r25	; 0x30
    1f5c:	8f a7       	std	Y+47, r24	; 0x2f
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <LCD_sendCommand+0xd2>
    1f60:	88 ec       	ldi	r24, 0xC8	; 200
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9e a7       	std	Y+46, r25	; 0x2e
    1f66:	8d a7       	std	Y+45, r24	; 0x2d
    1f68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_sendCommand+0xc0>
    1f70:	9e a7       	std	Y+46, r25	; 0x2e
    1f72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f76:	98 a9       	ldd	r25, Y+48	; 0x30
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	98 ab       	std	Y+48, r25	; 0x30
    1f7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f80:	98 a9       	ldd	r25, Y+48	; 0x30
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <LCD_sendCommand+0xb4>
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	98 ab       	std	Y+48, r25	; 0x30
    1f9a:	8f a7       	std	Y+47, r24	; 0x2f
    1f9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa0:	9c a7       	std	Y+44, r25	; 0x2c
    1fa2:	8b a7       	std	Y+43, r24	; 0x2b
    1fa4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_sendCommand+0xfc>
    1fac:	9c a7       	std	Y+44, r25	; 0x2c
    1fae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	62 e0       	ldi	r22, 0x02	; 2
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a0 e8       	ldi	r26, 0x80	; 128
    1fc0:	bf e3       	ldi	r27, 0x3F	; 63
    1fc2:	8f a3       	std	Y+39, r24	; 0x27
    1fc4:	98 a7       	std	Y+40, r25	; 0x28
    1fc6:	a9 a7       	std	Y+41, r26	; 0x29
    1fc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	6f a1       	ldd	r22, Y+39	; 0x27
    1fcc:	78 a5       	ldd	r23, Y+40	; 0x28
    1fce:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a ef       	ldi	r20, 0xFA	; 250
    1fd8:	54 e4       	ldi	r21, 0x44	; 68
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8b a3       	std	Y+35, r24	; 0x23
    1fe4:	9c a3       	std	Y+36, r25	; 0x24
    1fe6:	ad a3       	std	Y+37, r26	; 0x25
    1fe8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fea:	6b a1       	ldd	r22, Y+35	; 0x23
    1fec:	7c a1       	ldd	r23, Y+36	; 0x24
    1fee:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <LCD_sendCommand+0x160>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9a a3       	std	Y+34, r25	; 0x22
    2008:	89 a3       	std	Y+33, r24	; 0x21
    200a:	3f c0       	rjmp	.+126    	; 0x208a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    200c:	6b a1       	ldd	r22, Y+35	; 0x23
    200e:	7c a1       	ldd	r23, Y+36	; 0x24
    2010:	8d a1       	ldd	r24, Y+37	; 0x25
    2012:	9e a1       	ldd	r25, Y+38	; 0x26
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	6f a1       	ldd	r22, Y+39	; 0x27
    2026:	78 a5       	ldd	r23, Y+40	; 0x28
    2028:	89 a5       	ldd	r24, Y+41	; 0x29
    202a:	9a a5       	ldd	r25, Y+42	; 0x2a
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9a a3       	std	Y+34, r25	; 0x22
    204a:	89 a3       	std	Y+33, r24	; 0x21
    204c:	0f c0       	rjmp	.+30     	; 0x206c <LCD_sendCommand+0x1c0>
    204e:	88 ec       	ldi	r24, 0xC8	; 200
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	98 a3       	std	Y+32, r25	; 0x20
    2054:	8f 8f       	std	Y+31, r24	; 0x1f
    2056:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2058:	98 a1       	ldd	r25, Y+32	; 0x20
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_sendCommand+0x1ae>
    205e:	98 a3       	std	Y+32, r25	; 0x20
    2060:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	89 a1       	ldd	r24, Y+33	; 0x21
    2064:	9a a1       	ldd	r25, Y+34	; 0x22
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9a a3       	std	Y+34, r25	; 0x22
    206a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	89 a1       	ldd	r24, Y+33	; 0x21
    206e:	9a a1       	ldd	r25, Y+34	; 0x22
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <LCD_sendCommand+0x1a2>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	6b a1       	ldd	r22, Y+35	; 0x23
    2078:	7c a1       	ldd	r23, Y+36	; 0x24
    207a:	8d a1       	ldd	r24, Y+37	; 0x25
    207c:	9e a1       	ldd	r25, Y+38	; 0x26
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9a a3       	std	Y+34, r25	; 0x22
    2088:	89 a3       	std	Y+33, r24	; 0x21
    208a:	89 a1       	ldd	r24, Y+33	; 0x21
    208c:	9a a1       	ldd	r25, Y+34	; 0x22
    208e:	9e 8f       	std	Y+30, r25	; 0x1e
    2090:	8d 8f       	std	Y+29, r24	; 0x1d
    2092:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2094:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_sendCommand+0x1ea>
    209a:	9e 8f       	std	Y+30, r25	; 0x1e
    209c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	69 ad       	ldd	r22, Y+57	; 0x39
    20a2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <GPIO_writePort>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a0 e8       	ldi	r26, 0x80	; 128
    20ac:	bf e3       	ldi	r27, 0x3F	; 63
    20ae:	89 8f       	std	Y+25, r24	; 0x19
    20b0:	9a 8f       	std	Y+26, r25	; 0x1a
    20b2:	ab 8f       	std	Y+27, r26	; 0x1b
    20b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	69 8d       	ldd	r22, Y+25	; 0x19
    20b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	4a ef       	ldi	r20, 0xFA	; 250
    20c4:	54 e4       	ldi	r21, 0x44	; 68
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	8d 8b       	std	Y+21, r24	; 0x15
    20d0:	9e 8b       	std	Y+22, r25	; 0x16
    20d2:	af 8b       	std	Y+23, r26	; 0x17
    20d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d6:	6d 89       	ldd	r22, Y+21	; 0x15
    20d8:	7e 89       	ldd	r23, Y+22	; 0x16
    20da:	8f 89       	ldd	r24, Y+23	; 0x17
    20dc:	98 8d       	ldd	r25, Y+24	; 0x18
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e8       	ldi	r20, 0x80	; 128
    20e4:	5f e3       	ldi	r21, 0x3F	; 63
    20e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	2c f4       	brge	.+10     	; 0x20f8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9c 8b       	std	Y+20, r25	; 0x14
    20f4:	8b 8b       	std	Y+19, r24	; 0x13
    20f6:	3f c0       	rjmp	.+126    	; 0x2176 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    20f8:	6d 89       	ldd	r22, Y+21	; 0x15
    20fa:	7e 89       	ldd	r23, Y+22	; 0x16
    20fc:	8f 89       	ldd	r24, Y+23	; 0x17
    20fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	3f ef       	ldi	r19, 0xFF	; 255
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	57 e4       	ldi	r21, 0x47	; 71
    2108:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	4c f5       	brge	.+82     	; 0x2162 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2110:	69 8d       	ldd	r22, Y+25	; 0x19
    2112:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2114:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2116:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9c 8b       	std	Y+20, r25	; 0x14
    2136:	8b 8b       	std	Y+19, r24	; 0x13
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <LCD_sendCommand+0x2ac>
    213a:	88 ec       	ldi	r24, 0xC8	; 200
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9a 8b       	std	Y+18, r25	; 0x12
    2140:	89 8b       	std	Y+17, r24	; 0x11
    2142:	89 89       	ldd	r24, Y+17	; 0x11
    2144:	9a 89       	ldd	r25, Y+18	; 0x12
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_sendCommand+0x29a>
    214a:	9a 8b       	std	Y+18, r25	; 0x12
    214c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	9c 89       	ldd	r25, Y+20	; 0x14
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9c 8b       	std	Y+20, r25	; 0x14
    2156:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	8b 89       	ldd	r24, Y+19	; 0x13
    215a:	9c 89       	ldd	r25, Y+20	; 0x14
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f7       	brne	.-38     	; 0x213a <LCD_sendCommand+0x28e>
    2160:	14 c0       	rjmp	.+40     	; 0x218a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2162:	6d 89       	ldd	r22, Y+21	; 0x15
    2164:	7e 89       	ldd	r23, Y+22	; 0x16
    2166:	8f 89       	ldd	r24, Y+23	; 0x17
    2168:	98 8d       	ldd	r25, Y+24	; 0x18
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9c 8b       	std	Y+20, r25	; 0x14
    2174:	8b 8b       	std	Y+19, r24	; 0x13
    2176:	8b 89       	ldd	r24, Y+19	; 0x13
    2178:	9c 89       	ldd	r25, Y+20	; 0x14
    217a:	98 8b       	std	Y+16, r25	; 0x10
    217c:	8f 87       	std	Y+15, r24	; 0x0f
    217e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2180:	98 89       	ldd	r25, Y+16	; 0x10
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_sendCommand+0x2d6>
    2186:	98 8b       	std	Y+16, r25	; 0x10
    2188:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	62 e0       	ldi	r22, 0x02	; 2
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a0 e8       	ldi	r26, 0x80	; 128
    219a:	bf e3       	ldi	r27, 0x3F	; 63
    219c:	8b 87       	std	Y+11, r24	; 0x0b
    219e:	9c 87       	std	Y+12, r25	; 0x0c
    21a0:	ad 87       	std	Y+13, r26	; 0x0d
    21a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	4a ef       	ldi	r20, 0xFA	; 250
    21b2:	54 e4       	ldi	r21, 0x44	; 68
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8f 83       	std	Y+7, r24	; 0x07
    21be:	98 87       	std	Y+8, r25	; 0x08
    21c0:	a9 87       	std	Y+9, r26	; 0x09
    21c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f e3       	ldi	r21, 0x3F	; 63
    21d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d8:	88 23       	and	r24, r24
    21da:	2c f4       	brge	.+10     	; 0x21e6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	3f c0       	rjmp	.+126    	; 0x2264 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	57 e4       	ldi	r21, 0x47	; 71
    21f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	4c f5       	brge	.+82     	; 0x2250 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2200:	7c 85       	ldd	r23, Y+12	; 0x0c
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <LCD_sendCommand+0x39a>
    2228:	88 ec       	ldi	r24, 0xC8	; 200
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	8b 83       	std	Y+3, r24	; 0x03
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_sendCommand+0x388>
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	69 f7       	brne	.-38     	; 0x2228 <LCD_sendCommand+0x37c>
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	9a 81       	ldd	r25, Y+2	; 0x02
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <LCD_sendCommand+0x3c4>
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2278:	e9 96       	adiw	r28, 0x39	; 57
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	e9 97       	sbiw	r28, 0x39	; 57
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e8       	ldi	r26, 0x80	; 128
    22b0:	bf e3       	ldi	r27, 0x3F	; 63
    22b2:	8d ab       	std	Y+53, r24	; 0x35
    22b4:	9e ab       	std	Y+54, r25	; 0x36
    22b6:	af ab       	std	Y+55, r26	; 0x37
    22b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ba:	6d a9       	ldd	r22, Y+53	; 0x35
    22bc:	7e a9       	ldd	r23, Y+54	; 0x36
    22be:	8f a9       	ldd	r24, Y+55	; 0x37
    22c0:	98 ad       	ldd	r25, Y+56	; 0x38
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a ef       	ldi	r20, 0xFA	; 250
    22c8:	54 e4       	ldi	r21, 0x44	; 68
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	89 ab       	std	Y+49, r24	; 0x31
    22d4:	9a ab       	std	Y+50, r25	; 0x32
    22d6:	ab ab       	std	Y+51, r26	; 0x33
    22d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22da:	69 a9       	ldd	r22, Y+49	; 0x31
    22dc:	7a a9       	ldd	r23, Y+50	; 0x32
    22de:	8b a9       	ldd	r24, Y+51	; 0x33
    22e0:	9c a9       	ldd	r25, Y+52	; 0x34
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ee:	88 23       	and	r24, r24
    22f0:	2c f4       	brge	.+10     	; 0x22fc <LCD_displayCharacter+0x72>
		__ticks = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	98 ab       	std	Y+48, r25	; 0x30
    22f8:	8f a7       	std	Y+47, r24	; 0x2f
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    22fc:	69 a9       	ldd	r22, Y+49	; 0x31
    22fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2300:	8b a9       	ldd	r24, Y+51	; 0x33
    2302:	9c a9       	ldd	r25, Y+52	; 0x34
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	3f ef       	ldi	r19, 0xFF	; 255
    2308:	4f e7       	ldi	r20, 0x7F	; 127
    230a:	57 e4       	ldi	r21, 0x47	; 71
    230c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2310:	18 16       	cp	r1, r24
    2312:	4c f5       	brge	.+82     	; 0x2366 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2314:	6d a9       	ldd	r22, Y+53	; 0x35
    2316:	7e a9       	ldd	r23, Y+54	; 0x36
    2318:	8f a9       	ldd	r24, Y+55	; 0x37
    231a:	98 ad       	ldd	r25, Y+56	; 0x38
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e2       	ldi	r20, 0x20	; 32
    2322:	51 e4       	ldi	r21, 0x41	; 65
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	98 ab       	std	Y+48, r25	; 0x30
    233a:	8f a7       	std	Y+47, r24	; 0x2f
    233c:	0f c0       	rjmp	.+30     	; 0x235c <LCD_displayCharacter+0xd2>
    233e:	88 ec       	ldi	r24, 0xC8	; 200
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e a7       	std	Y+46, r25	; 0x2e
    2344:	8d a7       	std	Y+45, r24	; 0x2d
    2346:	8d a5       	ldd	r24, Y+45	; 0x2d
    2348:	9e a5       	ldd	r25, Y+46	; 0x2e
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <LCD_displayCharacter+0xc0>
    234e:	9e a7       	std	Y+46, r25	; 0x2e
    2350:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	8f a5       	ldd	r24, Y+47	; 0x2f
    2354:	98 a9       	ldd	r25, Y+48	; 0x30
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	98 ab       	std	Y+48, r25	; 0x30
    235a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235c:	8f a5       	ldd	r24, Y+47	; 0x2f
    235e:	98 a9       	ldd	r25, Y+48	; 0x30
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	69 f7       	brne	.-38     	; 0x233e <LCD_displayCharacter+0xb4>
    2364:	14 c0       	rjmp	.+40     	; 0x238e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2366:	69 a9       	ldd	r22, Y+49	; 0x31
    2368:	7a a9       	ldd	r23, Y+50	; 0x32
    236a:	8b a9       	ldd	r24, Y+51	; 0x33
    236c:	9c a9       	ldd	r25, Y+52	; 0x34
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	98 ab       	std	Y+48, r25	; 0x30
    2378:	8f a7       	std	Y+47, r24	; 0x2f
    237a:	8f a5       	ldd	r24, Y+47	; 0x2f
    237c:	98 a9       	ldd	r25, Y+48	; 0x30
    237e:	9c a7       	std	Y+44, r25	; 0x2c
    2380:	8b a7       	std	Y+43, r24	; 0x2b
    2382:	8b a5       	ldd	r24, Y+43	; 0x2b
    2384:	9c a5       	ldd	r25, Y+44	; 0x2c
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <LCD_displayCharacter+0xfc>
    238a:	9c a7       	std	Y+44, r25	; 0x2c
    238c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	62 e0       	ldi	r22, 0x02	; 2
    2392:	41 e0       	ldi	r20, 0x01	; 1
    2394:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a0 e8       	ldi	r26, 0x80	; 128
    239e:	bf e3       	ldi	r27, 0x3F	; 63
    23a0:	8f a3       	std	Y+39, r24	; 0x27
    23a2:	98 a7       	std	Y+40, r25	; 0x28
    23a4:	a9 a7       	std	Y+41, r26	; 0x29
    23a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a8:	6f a1       	ldd	r22, Y+39	; 0x27
    23aa:	78 a5       	ldd	r23, Y+40	; 0x28
    23ac:	89 a5       	ldd	r24, Y+41	; 0x29
    23ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	4a ef       	ldi	r20, 0xFA	; 250
    23b6:	54 e4       	ldi	r21, 0x44	; 68
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	8b a3       	std	Y+35, r24	; 0x23
    23c2:	9c a3       	std	Y+36, r25	; 0x24
    23c4:	ad a3       	std	Y+37, r26	; 0x25
    23c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23c8:	6b a1       	ldd	r22, Y+35	; 0x23
    23ca:	7c a1       	ldd	r23, Y+36	; 0x24
    23cc:	8d a1       	ldd	r24, Y+37	; 0x25
    23ce:	9e a1       	ldd	r25, Y+38	; 0x26
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e8       	ldi	r20, 0x80	; 128
    23d6:	5f e3       	ldi	r21, 0x3F	; 63
    23d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23dc:	88 23       	and	r24, r24
    23de:	2c f4       	brge	.+10     	; 0x23ea <LCD_displayCharacter+0x160>
		__ticks = 1;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9a a3       	std	Y+34, r25	; 0x22
    23e6:	89 a3       	std	Y+33, r24	; 0x21
    23e8:	3f c0       	rjmp	.+126    	; 0x2468 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    23ea:	6b a1       	ldd	r22, Y+35	; 0x23
    23ec:	7c a1       	ldd	r23, Y+36	; 0x24
    23ee:	8d a1       	ldd	r24, Y+37	; 0x25
    23f0:	9e a1       	ldd	r25, Y+38	; 0x26
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	57 e4       	ldi	r21, 0x47	; 71
    23fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fe:	18 16       	cp	r1, r24
    2400:	4c f5       	brge	.+82     	; 0x2454 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2402:	6f a1       	ldd	r22, Y+39	; 0x27
    2404:	78 a5       	ldd	r23, Y+40	; 0x28
    2406:	89 a5       	ldd	r24, Y+41	; 0x29
    2408:	9a a5       	ldd	r25, Y+42	; 0x2a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e2       	ldi	r20, 0x20	; 32
    2410:	51 e4       	ldi	r21, 0x41	; 65
    2412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	9a a3       	std	Y+34, r25	; 0x22
    2428:	89 a3       	std	Y+33, r24	; 0x21
    242a:	0f c0       	rjmp	.+30     	; 0x244a <LCD_displayCharacter+0x1c0>
    242c:	88 ec       	ldi	r24, 0xC8	; 200
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	98 a3       	std	Y+32, r25	; 0x20
    2432:	8f 8f       	std	Y+31, r24	; 0x1f
    2434:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2436:	98 a1       	ldd	r25, Y+32	; 0x20
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_displayCharacter+0x1ae>
    243c:	98 a3       	std	Y+32, r25	; 0x20
    243e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2440:	89 a1       	ldd	r24, Y+33	; 0x21
    2442:	9a a1       	ldd	r25, Y+34	; 0x22
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	9a a3       	std	Y+34, r25	; 0x22
    2448:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244a:	89 a1       	ldd	r24, Y+33	; 0x21
    244c:	9a a1       	ldd	r25, Y+34	; 0x22
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	69 f7       	brne	.-38     	; 0x242c <LCD_displayCharacter+0x1a2>
    2452:	14 c0       	rjmp	.+40     	; 0x247c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2454:	6b a1       	ldd	r22, Y+35	; 0x23
    2456:	7c a1       	ldd	r23, Y+36	; 0x24
    2458:	8d a1       	ldd	r24, Y+37	; 0x25
    245a:	9e a1       	ldd	r25, Y+38	; 0x26
    245c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	9a a3       	std	Y+34, r25	; 0x22
    2466:	89 a3       	std	Y+33, r24	; 0x21
    2468:	89 a1       	ldd	r24, Y+33	; 0x21
    246a:	9a a1       	ldd	r25, Y+34	; 0x22
    246c:	9e 8f       	std	Y+30, r25	; 0x1e
    246e:	8d 8f       	std	Y+29, r24	; 0x1d
    2470:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2472:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <LCD_displayCharacter+0x1ea>
    2478:	9e 8f       	std	Y+30, r25	; 0x1e
    247a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	69 ad       	ldd	r22, Y+57	; 0x39
    2480:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <GPIO_writePort>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a0 e8       	ldi	r26, 0x80	; 128
    248a:	bf e3       	ldi	r27, 0x3F	; 63
    248c:	89 8f       	std	Y+25, r24	; 0x19
    248e:	9a 8f       	std	Y+26, r25	; 0x1a
    2490:	ab 8f       	std	Y+27, r26	; 0x1b
    2492:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	69 8d       	ldd	r22, Y+25	; 0x19
    2496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a ef       	ldi	r20, 0xFA	; 250
    24a2:	54 e4       	ldi	r21, 0x44	; 68
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8d 8b       	std	Y+21, r24	; 0x15
    24ae:	9e 8b       	std	Y+22, r25	; 0x16
    24b0:	af 8b       	std	Y+23, r26	; 0x17
    24b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b4:	6d 89       	ldd	r22, Y+21	; 0x15
    24b6:	7e 89       	ldd	r23, Y+22	; 0x16
    24b8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ba:	98 8d       	ldd	r25, Y+24	; 0x18
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	3f c0       	rjmp	.+126    	; 0x2554 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	4c f5       	brge	.+82     	; 0x2540 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	69 8d       	ldd	r22, Y+25	; 0x19
    24f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9c 8b       	std	Y+20, r25	; 0x14
    2514:	8b 8b       	std	Y+19, r24	; 0x13
    2516:	0f c0       	rjmp	.+30     	; 0x2536 <LCD_displayCharacter+0x2ac>
    2518:	88 ec       	ldi	r24, 0xC8	; 200
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9a 8b       	std	Y+18, r25	; 0x12
    251e:	89 8b       	std	Y+17, r24	; 0x11
    2520:	89 89       	ldd	r24, Y+17	; 0x11
    2522:	9a 89       	ldd	r25, Y+18	; 0x12
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_displayCharacter+0x29a>
    2528:	9a 8b       	std	Y+18, r25	; 0x12
    252a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	8b 89       	ldd	r24, Y+19	; 0x13
    252e:	9c 89       	ldd	r25, Y+20	; 0x14
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	8b 89       	ldd	r24, Y+19	; 0x13
    2538:	9c 89       	ldd	r25, Y+20	; 0x14
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	69 f7       	brne	.-38     	; 0x2518 <LCD_displayCharacter+0x28e>
    253e:	14 c0       	rjmp	.+40     	; 0x2568 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	6d 89       	ldd	r22, Y+21	; 0x15
    2542:	7e 89       	ldd	r23, Y+22	; 0x16
    2544:	8f 89       	ldd	r24, Y+23	; 0x17
    2546:	98 8d       	ldd	r25, Y+24	; 0x18
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
    2554:	8b 89       	ldd	r24, Y+19	; 0x13
    2556:	9c 89       	ldd	r25, Y+20	; 0x14
    2558:	98 8b       	std	Y+16, r25	; 0x10
    255a:	8f 87       	std	Y+15, r24	; 0x0f
    255c:	8f 85       	ldd	r24, Y+15	; 0x0f
    255e:	98 89       	ldd	r25, Y+16	; 0x10
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <LCD_displayCharacter+0x2d6>
    2564:	98 8b       	std	Y+16, r25	; 0x10
    2566:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	62 e0       	ldi	r22, 0x02	; 2
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	a0 e8       	ldi	r26, 0x80	; 128
    2578:	bf e3       	ldi	r27, 0x3F	; 63
    257a:	8b 87       	std	Y+11, r24	; 0x0b
    257c:	9c 87       	std	Y+12, r25	; 0x0c
    257e:	ad 87       	std	Y+13, r26	; 0x0d
    2580:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2582:	6b 85       	ldd	r22, Y+11	; 0x0b
    2584:	7c 85       	ldd	r23, Y+12	; 0x0c
    2586:	8d 85       	ldd	r24, Y+13	; 0x0d
    2588:	9e 85       	ldd	r25, Y+14	; 0x0e
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	4a ef       	ldi	r20, 0xFA	; 250
    2590:	54 e4       	ldi	r21, 0x44	; 68
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	8f 83       	std	Y+7, r24	; 0x07
    259c:	98 87       	std	Y+8, r25	; 0x08
    259e:	a9 87       	std	Y+9, r26	; 0x09
    25a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a2:	6f 81       	ldd	r22, Y+7	; 0x07
    25a4:	78 85       	ldd	r23, Y+8	; 0x08
    25a6:	89 85       	ldd	r24, Y+9	; 0x09
    25a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e8       	ldi	r20, 0x80	; 128
    25b0:	5f e3       	ldi	r21, 0x3F	; 63
    25b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b6:	88 23       	and	r24, r24
    25b8:	2c f4       	brge	.+10     	; 0x25c4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	3f c0       	rjmp	.+126    	; 0x2642 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	3f ef       	ldi	r19, 0xFF	; 255
    25d0:	4f e7       	ldi	r20, 0x7F	; 127
    25d2:	57 e4       	ldi	r21, 0x47	; 71
    25d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d8:	18 16       	cp	r1, r24
    25da:	4c f5       	brge	.+82     	; 0x262e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25de:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e2       	ldi	r20, 0x20	; 32
    25ea:	51 e4       	ldi	r21, 0x41	; 65
    25ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	bc 01       	movw	r22, r24
    25f6:	cd 01       	movw	r24, r26
    25f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
    2604:	0f c0       	rjmp	.+30     	; 0x2624 <LCD_displayCharacter+0x39a>
    2606:	88 ec       	ldi	r24, 0xC8	; 200
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9c 83       	std	Y+4, r25	; 0x04
    260c:	8b 83       	std	Y+3, r24	; 0x03
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <LCD_displayCharacter+0x388>
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261a:	8d 81       	ldd	r24, Y+5	; 0x05
    261c:	9e 81       	ldd	r25, Y+6	; 0x06
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	9e 81       	ldd	r25, Y+6	; 0x06
    2628:	00 97       	sbiw	r24, 0x00	; 0
    262a:	69 f7       	brne	.-38     	; 0x2606 <LCD_displayCharacter+0x37c>
    262c:	14 c0       	rjmp	.+40     	; 0x2656 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262e:	6f 81       	ldd	r22, Y+7	; 0x07
    2630:	78 85       	ldd	r23, Y+8	; 0x08
    2632:	89 85       	ldd	r24, Y+9	; 0x09
    2634:	9a 85       	ldd	r25, Y+10	; 0x0a
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	8d 81       	ldd	r24, Y+5	; 0x05
    2644:	9e 81       	ldd	r25, Y+6	; 0x06
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <LCD_displayCharacter+0x3c4>
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2656:	e9 96       	adiw	r28, 0x39	; 57
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <LCD_displayString+0x6>
    266e:	0f 92       	push	r0
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	9b 83       	std	Y+3, r25	; 0x03
    2676:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2678:	19 82       	std	Y+1, r1	; 0x01
    267a:	0e c0       	rjmp	.+28     	; 0x2698 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	fc 01       	movw	r30, r24
    2688:	e2 0f       	add	r30, r18
    268a:	f3 1f       	adc	r31, r19
    268c:	80 81       	ld	r24, Z
    268e:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_displayCharacter>
		i++;
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	8f 5f       	subi	r24, 0xFF	; 255
    2696:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	fc 01       	movw	r30, r24
    26a4:	e2 0f       	add	r30, r18
    26a6:	f3 1f       	adc	r31, r19
    26a8:	80 81       	ld	r24, Z
    26aa:	88 23       	and	r24, r24
    26ac:	39 f7       	brne	.-50     	; 0x267c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <LCD_moveCursor+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <LCD_moveCursor+0x8>
    26c2:	0f 92       	push	r0
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	8a 83       	std	Y+2, r24	; 0x02
    26ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	3d 83       	std	Y+5, r19	; 0x05
    26d4:	2c 83       	std	Y+4, r18	; 0x04
    26d6:	8c 81       	ldd	r24, Y+4	; 0x04
    26d8:	9d 81       	ldd	r25, Y+5	; 0x05
    26da:	81 30       	cpi	r24, 0x01	; 1
    26dc:	91 05       	cpc	r25, r1
    26de:	c1 f0       	breq	.+48     	; 0x2710 <LCD_moveCursor+0x56>
    26e0:	2c 81       	ldd	r18, Y+4	; 0x04
    26e2:	3d 81       	ldd	r19, Y+5	; 0x05
    26e4:	22 30       	cpi	r18, 0x02	; 2
    26e6:	31 05       	cpc	r19, r1
    26e8:	2c f4       	brge	.+10     	; 0x26f4 <LCD_moveCursor+0x3a>
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	9d 81       	ldd	r25, Y+5	; 0x05
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	61 f0       	breq	.+24     	; 0x270a <LCD_moveCursor+0x50>
    26f2:	19 c0       	rjmp	.+50     	; 0x2726 <LCD_moveCursor+0x6c>
    26f4:	2c 81       	ldd	r18, Y+4	; 0x04
    26f6:	3d 81       	ldd	r19, Y+5	; 0x05
    26f8:	22 30       	cpi	r18, 0x02	; 2
    26fa:	31 05       	cpc	r19, r1
    26fc:	69 f0       	breq	.+26     	; 0x2718 <LCD_moveCursor+0x5e>
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	9d 81       	ldd	r25, Y+5	; 0x05
    2702:	83 30       	cpi	r24, 0x03	; 3
    2704:	91 05       	cpc	r25, r1
    2706:	61 f0       	breq	.+24     	; 0x2720 <LCD_moveCursor+0x66>
    2708:	0e c0       	rjmp	.+28     	; 0x2726 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	0b c0       	rjmp	.+22     	; 0x2726 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	80 5c       	subi	r24, 0xC0	; 192
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	07 c0       	rjmp	.+14     	; 0x2726 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	80 5f       	subi	r24, 0xF0	; 240
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	03 c0       	rjmp	.+6      	; 0x2726 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	80 5b       	subi	r24, 0xB0	; 176
    2724:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	80 68       	ori	r24, 0x80	; 128
    272a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <LCD_sendCommand>
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	00 d0       	rcall	.+0      	; 0x2744 <LCD_displayStringRowColumn+0x6>
    2744:	00 d0       	rcall	.+0      	; 0x2746 <LCD_displayStringRowColumn+0x8>
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	6a 83       	std	Y+2, r22	; 0x02
    274e:	5c 83       	std	Y+4, r21	; 0x04
    2750:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	6a 81       	ldd	r22, Y+2	; 0x02
    2756:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
}
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret

00002770 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	62 97       	sbiw	r28, 0x12	; 18
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	9a 8b       	std	Y+18, r25	; 0x12
    2786:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2788:	89 89       	ldd	r24, Y+17	; 0x11
    278a:	9a 89       	ldd	r25, Y+18	; 0x12
    278c:	9e 01       	movw	r18, r28
    278e:	2f 5f       	subi	r18, 0xFF	; 255
    2790:	3f 4f       	sbci	r19, 0xFF	; 255
    2792:	b9 01       	movw	r22, r18
    2794:	4a e0       	ldi	r20, 0x0A	; 10
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <itoa>
   LCD_displayString(buff); /* Display the string */
    279c:	ce 01       	movw	r24, r28
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_displayString>
}
    27a4:	62 96       	adiw	r28, 0x12	; 18
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <LCD_sendCommand>
}
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <__vector_7>:
 *******************************************************************************/
//two ISR’s for Normal and Compare interrupts.

/* For calling the call back functions */
ISR (TIMER1_COMPA_vect)
{
    27ca:	1f 92       	push	r1
    27cc:	0f 92       	push	r0
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	0f 92       	push	r0
    27d2:	11 24       	eor	r1, r1
    27d4:	2f 93       	push	r18
    27d6:	3f 93       	push	r19
    27d8:	4f 93       	push	r20
    27da:	5f 93       	push	r21
    27dc:	6f 93       	push	r22
    27de:	7f 93       	push	r23
    27e0:	8f 93       	push	r24
    27e2:	9f 93       	push	r25
    27e4:	af 93       	push	r26
    27e6:	bf 93       	push	r27
    27e8:	ef 93       	push	r30
    27ea:	ff 93       	push	r31
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
	if (g_callBack_Ptr != NULL_PTR)
    27f4:	80 91 ed 00 	lds	r24, 0x00ED
    27f8:	90 91 ee 00 	lds	r25, 0x00EE
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	29 f0       	breq	.+10     	; 0x280a <__vector_7+0x40>
		{
			(*g_callBack_Ptr)();
    2800:	e0 91 ed 00 	lds	r30, 0x00ED
    2804:	f0 91 ee 00 	lds	r31, 0x00EE
    2808:	09 95       	icall
		}
}
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	ff 91       	pop	r31
    2810:	ef 91       	pop	r30
    2812:	bf 91       	pop	r27
    2814:	af 91       	pop	r26
    2816:	9f 91       	pop	r25
    2818:	8f 91       	pop	r24
    281a:	7f 91       	pop	r23
    281c:	6f 91       	pop	r22
    281e:	5f 91       	pop	r21
    2820:	4f 91       	pop	r20
    2822:	3f 91       	pop	r19
    2824:	2f 91       	pop	r18
    2826:	0f 90       	pop	r0
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	0f 90       	pop	r0
    282c:	1f 90       	pop	r1
    282e:	18 95       	reti

00002830 <__vector_9>:

ISR (TIMER1_OVF_vect)
{
    2830:	1f 92       	push	r1
    2832:	0f 92       	push	r0
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	0f 92       	push	r0
    2838:	11 24       	eor	r1, r1
    283a:	2f 93       	push	r18
    283c:	3f 93       	push	r19
    283e:	4f 93       	push	r20
    2840:	5f 93       	push	r21
    2842:	6f 93       	push	r22
    2844:	7f 93       	push	r23
    2846:	8f 93       	push	r24
    2848:	9f 93       	push	r25
    284a:	af 93       	push	r26
    284c:	bf 93       	push	r27
    284e:	ef 93       	push	r30
    2850:	ff 93       	push	r31
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
	if (g_callBack_Ptr != NULL_PTR)
    285a:	80 91 ed 00 	lds	r24, 0x00ED
    285e:	90 91 ee 00 	lds	r25, 0x00EE
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	29 f0       	breq	.+10     	; 0x2870 <__vector_9+0x40>
	{
		(*g_callBack_Ptr)();
    2866:	e0 91 ed 00 	lds	r30, 0x00ED
    286a:	f0 91 ee 00 	lds	r31, 0x00EE
    286e:	09 95       	icall
	}
}
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	ff 91       	pop	r31
    2876:	ef 91       	pop	r30
    2878:	bf 91       	pop	r27
    287a:	af 91       	pop	r26
    287c:	9f 91       	pop	r25
    287e:	8f 91       	pop	r24
    2880:	7f 91       	pop	r23
    2882:	6f 91       	pop	r22
    2884:	5f 91       	pop	r21
    2886:	4f 91       	pop	r20
    2888:	3f 91       	pop	r19
    288a:	2f 91       	pop	r18
    288c:	0f 90       	pop	r0
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	0f 90       	pop	r0
    2892:	1f 90       	pop	r1
    2894:	18 95       	reti

00002896 <Timer1_init>:

/*● Description
⮚ Function to initialize the Timer driver*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <Timer1_init+0x6>
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value; /* Set the initial timer value */
    28a4:	ac e4       	ldi	r26, 0x4C	; 76
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e9 81       	ldd	r30, Y+1	; 0x01
    28aa:	fa 81       	ldd	r31, Y+2	; 0x02
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	9c 93       	st	X, r25
    28b4:	8e 93       	st	-X, r24
	TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler);/*Clock Select(Prescaler Setup), Setup the first three bits in TCCR1B reg*/
    28b6:	ae e4       	ldi	r26, 0x4E	; 78
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	ee e4       	ldi	r30, 0x4E	; 78
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	98 2f       	mov	r25, r24
    28c2:	98 7f       	andi	r25, 0xF8	; 248
    28c4:	e9 81       	ldd	r30, Y+1	; 0x01
    28c6:	fa 81       	ldd	r31, Y+2	; 0x02
    28c8:	84 81       	ldd	r24, Z+4	; 0x04
    28ca:	89 2b       	or	r24, r25
    28cc:	8c 93       	st	X, r24

	if(Config_Ptr->mode==NORMAL){
    28ce:	e9 81       	ldd	r30, Y+1	; 0x01
    28d0:	fa 81       	ldd	r31, Y+2	; 0x02
    28d2:	85 81       	ldd	r24, Z+5	; 0x05
    28d4:	88 23       	and	r24, r24
    28d6:	e1 f4       	brne	.+56     	; 0x2910 <Timer1_init+0x7a>
		TCCR1B=(TCCR1B & 0xF7)| ((Config_Ptr->mode)<<3);/*Waveform Generation Mode Bit, 0 for NORMAL Mode, clear the forth bit(WGM12) in TCCR1B reg*/
    28d8:	ae e4       	ldi	r26, 0x4E	; 78
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	ee e4       	ldi	r30, 0x4E	; 78
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	28 2f       	mov	r18, r24
    28e4:	27 7f       	andi	r18, 0xF7	; 247
    28e6:	e9 81       	ldd	r30, Y+1	; 0x01
    28e8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ea:	85 81       	ldd	r24, Z+5	; 0x05
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	82 2b       	or	r24, r18
    28fe:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMER1_TIMSK_TOIE1);/*Overflow Interrupt Enable*/
    2900:	a9 e5       	ldi	r26, 0x59	; 89
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e9 e5       	ldi	r30, 0x59	; 89
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	84 60       	ori	r24, 0x04	; 4
    290c:	8c 93       	st	X, r24
    290e:	30 c0       	rjmp	.+96     	; 0x2970 <Timer1_init+0xda>
	}
	else if(Config_Ptr->mode==CTC){
    2910:	e9 81       	ldd	r30, Y+1	; 0x01
    2912:	fa 81       	ldd	r31, Y+2	; 0x02
    2914:	85 81       	ldd	r24, Z+5	; 0x05
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	59 f5       	brne	.+86     	; 0x2970 <Timer1_init+0xda>
		 TCCR1B=(TCCR1B & 0xF7)| ((Config_Ptr->mode)<<3);/*Waveform Generation Mode Bit, 1 for CTC Mode, Set the forth bit(WGM12) in TCCR1B reg*/
    291a:	ae e4       	ldi	r26, 0x4E	; 78
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	ee e4       	ldi	r30, 0x4E	; 78
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	28 2f       	mov	r18, r24
    2926:	27 7f       	andi	r18, 0xF7	; 247
    2928:	e9 81       	ldd	r30, Y+1	; 0x01
    292a:	fa 81       	ldd	r31, Y+2	; 0x02
    292c:	85 81       	ldd	r24, Z+5	; 0x05
    292e:	88 2f       	mov	r24, r24
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	82 2b       	or	r24, r18
    2940:	8c 93       	st	X, r24
		 OCR1A=Config_Ptr->compare_value; /* Set the required compare value */
    2942:	aa e4       	ldi	r26, 0x4A	; 74
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e9 81       	ldd	r30, Y+1	; 0x01
    2948:	fa 81       	ldd	r31, Y+2	; 0x02
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	11 96       	adiw	r26, 0x01	; 1
    2950:	9c 93       	st	X, r25
    2952:	8e 93       	st	-X, r24
		 SET_BIT(TIMSK,TIMER1_TIMSK_OCIE1A); /*Output Compare A Match Interrupt Enable*/
    2954:	a9 e5       	ldi	r26, 0x59	; 89
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e9 e5       	ldi	r30, 0x59	; 89
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	80 61       	ori	r24, 0x10	; 16
    2960:	8c 93       	st	X, r24
		 SET_BIT(TIMSK,TIMER1_TCCR1A_COM1A1);/*Compare Output Mode for Compare unit A, Clear OC1A on compare match (Set output to low level)*/
    2962:	a9 e5       	ldi	r26, 0x59	; 89
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e9 e5       	ldi	r30, 0x59	; 89
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	80 68       	ori	r24, 0x80	; 128
    296e:	8c 93       	st	X, r24
	}
}
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <Timer1_deInit>:


/*● Description
⮚ Function to disable the Timer1.*/
void Timer1_deInit(void){
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=(TCCR1B & 0xF8); /*No_clock_source,disable the Timer1*/
    2982:	ae e4       	ldi	r26, 0x4E	; 78
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	ee e4       	ldi	r30, 0x4E	; 78
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	88 7f       	andi	r24, 0xF8	; 248
    298e:	8c 93       	st	X, r24
}
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <Timer1_setCallBack>:


/*● Description
⮚ Function to set the Call Back function address.*/
void Timer1_setCallBack(void(*a_ptr)(void)){
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	00 d0       	rcall	.+0      	; 0x299c <Timer1_setCallBack+0x6>
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_Ptr = (volatile void*)a_ptr;
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	9a 81       	ldd	r25, Y+2	; 0x02
    29a8:	90 93 ee 00 	sts	0x00EE, r25
    29ac:	80 93 ed 00 	sts	0x00ED, r24
}
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <UART_init+0x6>
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <UART_init+0x8>
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	9c 83       	std	Y+4, r25	; 0x04
    29c8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    29ca:	1a 82       	std	Y+2, r1	; 0x02
    29cc:	19 82       	std	Y+1, r1	; 0x01

		/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);
    29ce:	eb e2       	ldi	r30, 0x2B	; 43
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	80 83       	st	Z, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
		UCSRB = (1<<RXEN) | (1<<TXEN);
    29d6:	ea e2       	ldi	r30, 0x2A	; 42
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	88 e1       	ldi	r24, 0x18	; 24
    29dc:	80 83       	st	Z, r24
		 * UPM1:0  = 00 Disable parity bit
		 * USBS    = 0 One stop bit
		 * UCSZ1:0 = 11 For 8-bit data mode
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
		SET_BIT (UCSRA, URSEL);
    29de:	ab e2       	ldi	r26, 0x2B	; 43
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	eb e2       	ldi	r30, 0x2B	; 43
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 68       	ori	r24, 0x80	; 128
    29ea:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xCF) | ((Config_Ptr -> parity & 0x03) << 4); /* Select the type of parity bit */
    29ec:	a0 e4       	ldi	r26, 0x40	; 64
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e0 e4       	ldi	r30, 0x40	; 64
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	28 2f       	mov	r18, r24
    29f8:	2f 7c       	andi	r18, 0xCF	; 207
    29fa:	eb 81       	ldd	r30, Y+3	; 0x03
    29fc:	fc 81       	ldd	r31, Y+4	; 0x04
    29fe:	81 81       	ldd	r24, Z+1	; 0x01
    2a00:	88 2f       	mov	r24, r24
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	83 70       	andi	r24, 0x03	; 3
    2a06:	90 70       	andi	r25, 0x00	; 0
    2a08:	82 95       	swap	r24
    2a0a:	92 95       	swap	r25
    2a0c:	90 7f       	andi	r25, 0xF0	; 240
    2a0e:	98 27       	eor	r25, r24
    2a10:	80 7f       	andi	r24, 0xF0	; 240
    2a12:	98 27       	eor	r25, r24
    2a14:	82 2b       	or	r24, r18
    2a16:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF7) | ((Config_Ptr -> stop_bit   & 0x01) << 3); /* Select number of stop bits */
    2a18:	a0 e4       	ldi	r26, 0x40	; 64
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e0 e4       	ldi	r30, 0x40	; 64
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	28 2f       	mov	r18, r24
    2a24:	27 7f       	andi	r18, 0xF7	; 247
    2a26:	eb 81       	ldd	r30, Y+3	; 0x03
    2a28:	fc 81       	ldd	r31, Y+4	; 0x04
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	81 70       	andi	r24, 0x01	; 1
    2a32:	90 70       	andi	r25, 0x00	; 0
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	82 2b       	or	r24, r18
    2a42:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF8) | (Config_Ptr -> bit_data    & 0x07);       /* Select number of data bits */
    2a44:	a0 e4       	ldi	r26, 0x40	; 64
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e0 e4       	ldi	r30, 0x40	; 64
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	98 2f       	mov	r25, r24
    2a50:	98 7f       	andi	r25, 0xF8	; 248
    2a52:	eb 81       	ldd	r30, Y+3	; 0x03
    2a54:	fc 81       	ldd	r31, Y+4	; 0x04
    2a56:	80 81       	ld	r24, Z
    2a58:	87 70       	andi	r24, 0x07	; 7
    2a5a:	89 2b       	or	r24, r25
    2a5c:	8c 93       	st	X, r24

		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / (Config_Ptr -> baud_rate * 8UL))) - 1);
    2a5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a60:	fc 81       	ldd	r31, Y+4	; 0x04
    2a62:	83 81       	ldd	r24, Z+3	; 0x03
    2a64:	94 81       	ldd	r25, Z+4	; 0x04
    2a66:	cc 01       	movw	r24, r24
    2a68:	a0 e0       	ldi	r26, 0x00	; 0
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	aa 1f       	adc	r26, r26
    2a72:	bb 1f       	adc	r27, r27
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	aa 1f       	adc	r26, r26
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	aa 1f       	adc	r26, r26
    2a82:	bb 1f       	adc	r27, r27
    2a84:	9c 01       	movw	r18, r24
    2a86:	ad 01       	movw	r20, r26
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	92 e1       	ldi	r25, 0x12	; 18
    2a8c:	aa e7       	ldi	r26, 0x7A	; 122
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 f5 15 	call	0x2bea	; 0x2bea <__udivmodsi4>
    2a98:	da 01       	movw	r26, r20
    2a9a:	c9 01       	movw	r24, r18
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = ubrr_value>>8;
    2aa2:	e0 e4       	ldi	r30, 0x40	; 64
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aaa:	89 2f       	mov	r24, r25
    2aac:	99 27       	eor	r25, r25
    2aae:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    2ab0:	e9 e2       	ldi	r30, 0x29	; 41
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	80 83       	st	Z, r24
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	08 95       	ret

00002ac6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	0f 92       	push	r0
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ad2:	eb e2       	ldi	r30, 0x2B	; 43
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	80 72       	andi	r24, 0x20	; 32
    2ade:	90 70       	andi	r25, 0x00	; 0
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	b9 f3       	breq	.-18     	; 0x2ad2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2ae4:	ec e2       	ldi	r30, 0x2C	; 44
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2aec:	0f 90       	pop	r0
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2afc:	eb e2       	ldi	r30, 0x2B	; 43
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	88 23       	and	r24, r24
    2b04:	dc f7       	brge	.-10     	; 0x2afc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2b06:	ec e2       	ldi	r30, 0x2C	; 44
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
}
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	00 d0       	rcall	.+0      	; 0x2b18 <UART_sendString+0x6>
    2b18:	0f 92       	push	r0
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	9b 83       	std	Y+3, r25	; 0x03
    2b20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b22:	19 82       	std	Y+1, r1	; 0x01
    2b24:	0e c0       	rjmp	.+28     	; 0x2b42 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	28 2f       	mov	r18, r24
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b30:	fc 01       	movw	r30, r24
    2b32:	e2 0f       	add	r30, r18
    2b34:	f3 1f       	adc	r31, r19
    2b36:	80 81       	ld	r24, Z
    2b38:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <UART_sendByte>
		i++;
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	8f 5f       	subi	r24, 0xFF	; 255
    2b40:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	e2 0f       	add	r30, r18
    2b50:	f3 1f       	adc	r31, r19
    2b52:	80 81       	ld	r24, Z
    2b54:	88 23       	and	r24, r24
    2b56:	39 f7       	brne	.-50     	; 0x2b26 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <UART_receiveString+0xa>
    2b6e:	0f 92       	push	r0
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	9b 83       	std	Y+3, r25	; 0x03
    2b76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b78:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	9b 81       	ldd	r25, Y+3	; 0x03
    2b84:	8c 01       	movw	r16, r24
    2b86:	02 0f       	add	r16, r18
    2b88:	13 1f       	adc	r17, r19
    2b8a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <UART_recieveByte>
    2b8e:	f8 01       	movw	r30, r16
    2b90:	80 83       	st	Z, r24
    2b92:	0f c0       	rjmp	.+30     	; 0x2bb2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	8f 5f       	subi	r24, 0xFF	; 255
    2b98:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba4:	8c 01       	movw	r16, r24
    2ba6:	02 0f       	add	r16, r18
    2ba8:	13 1f       	adc	r17, r19
    2baa:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <UART_recieveByte>
    2bae:	f8 01       	movw	r30, r16
    2bb0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	e2 0f       	add	r30, r18
    2bc0:	f3 1f       	adc	r31, r19
    2bc2:	80 81       	ld	r24, Z
    2bc4:	83 32       	cpi	r24, 0x23	; 35
    2bc6:	31 f7       	brne	.-52     	; 0x2b94 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e2 0f       	add	r30, r18
    2bd6:	f3 1f       	adc	r31, r19
    2bd8:	10 82       	st	Z, r1
}
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	1f 91       	pop	r17
    2be6:	0f 91       	pop	r16
    2be8:	08 95       	ret

00002bea <__udivmodsi4>:
    2bea:	a1 e2       	ldi	r26, 0x21	; 33
    2bec:	1a 2e       	mov	r1, r26
    2bee:	aa 1b       	sub	r26, r26
    2bf0:	bb 1b       	sub	r27, r27
    2bf2:	fd 01       	movw	r30, r26
    2bf4:	0d c0       	rjmp	.+26     	; 0x2c10 <__udivmodsi4_ep>

00002bf6 <__udivmodsi4_loop>:
    2bf6:	aa 1f       	adc	r26, r26
    2bf8:	bb 1f       	adc	r27, r27
    2bfa:	ee 1f       	adc	r30, r30
    2bfc:	ff 1f       	adc	r31, r31
    2bfe:	a2 17       	cp	r26, r18
    2c00:	b3 07       	cpc	r27, r19
    2c02:	e4 07       	cpc	r30, r20
    2c04:	f5 07       	cpc	r31, r21
    2c06:	20 f0       	brcs	.+8      	; 0x2c10 <__udivmodsi4_ep>
    2c08:	a2 1b       	sub	r26, r18
    2c0a:	b3 0b       	sbc	r27, r19
    2c0c:	e4 0b       	sbc	r30, r20
    2c0e:	f5 0b       	sbc	r31, r21

00002c10 <__udivmodsi4_ep>:
    2c10:	66 1f       	adc	r22, r22
    2c12:	77 1f       	adc	r23, r23
    2c14:	88 1f       	adc	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	1a 94       	dec	r1
    2c1a:	69 f7       	brne	.-38     	; 0x2bf6 <__udivmodsi4_loop>
    2c1c:	60 95       	com	r22
    2c1e:	70 95       	com	r23
    2c20:	80 95       	com	r24
    2c22:	90 95       	com	r25
    2c24:	9b 01       	movw	r18, r22
    2c26:	ac 01       	movw	r20, r24
    2c28:	bd 01       	movw	r22, r26
    2c2a:	cf 01       	movw	r24, r30
    2c2c:	08 95       	ret

00002c2e <__prologue_saves__>:
    2c2e:	2f 92       	push	r2
    2c30:	3f 92       	push	r3
    2c32:	4f 92       	push	r4
    2c34:	5f 92       	push	r5
    2c36:	6f 92       	push	r6
    2c38:	7f 92       	push	r7
    2c3a:	8f 92       	push	r8
    2c3c:	9f 92       	push	r9
    2c3e:	af 92       	push	r10
    2c40:	bf 92       	push	r11
    2c42:	cf 92       	push	r12
    2c44:	df 92       	push	r13
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	ca 1b       	sub	r28, r26
    2c58:	db 0b       	sbc	r29, r27
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	09 94       	ijmp

00002c66 <__epilogue_restores__>:
    2c66:	2a 88       	ldd	r2, Y+18	; 0x12
    2c68:	39 88       	ldd	r3, Y+17	; 0x11
    2c6a:	48 88       	ldd	r4, Y+16	; 0x10
    2c6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c70:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c72:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c74:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c76:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c78:	b9 84       	ldd	r11, Y+9	; 0x09
    2c7a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c7c:	df 80       	ldd	r13, Y+7	; 0x07
    2c7e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c80:	fd 80       	ldd	r15, Y+5	; 0x05
    2c82:	0c 81       	ldd	r16, Y+4	; 0x04
    2c84:	1b 81       	ldd	r17, Y+3	; 0x03
    2c86:	aa 81       	ldd	r26, Y+2	; 0x02
    2c88:	b9 81       	ldd	r27, Y+1	; 0x01
    2c8a:	ce 0f       	add	r28, r30
    2c8c:	d1 1d       	adc	r29, r1
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	ed 01       	movw	r28, r26
    2c9a:	08 95       	ret

00002c9c <itoa>:
    2c9c:	fb 01       	movw	r30, r22
    2c9e:	9f 01       	movw	r18, r30
    2ca0:	e8 94       	clt
    2ca2:	42 30       	cpi	r20, 0x02	; 2
    2ca4:	c4 f0       	brlt	.+48     	; 0x2cd6 <itoa+0x3a>
    2ca6:	45 32       	cpi	r20, 0x25	; 37
    2ca8:	b4 f4       	brge	.+44     	; 0x2cd6 <itoa+0x3a>
    2caa:	4a 30       	cpi	r20, 0x0A	; 10
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <itoa+0x1c>
    2cae:	97 fb       	bst	r25, 7
    2cb0:	1e f4       	brtc	.+6      	; 0x2cb8 <itoa+0x1c>
    2cb2:	90 95       	com	r25
    2cb4:	81 95       	neg	r24
    2cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb8:	64 2f       	mov	r22, r20
    2cba:	77 27       	eor	r23, r23
    2cbc:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__udivmodhi4>
    2cc0:	80 5d       	subi	r24, 0xD0	; 208
    2cc2:	8a 33       	cpi	r24, 0x3A	; 58
    2cc4:	0c f0       	brlt	.+2      	; 0x2cc8 <itoa+0x2c>
    2cc6:	89 5d       	subi	r24, 0xD9	; 217
    2cc8:	81 93       	st	Z+, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	a1 f7       	brne	.-24     	; 0x2cb8 <itoa+0x1c>
    2cd0:	16 f4       	brtc	.+4      	; 0x2cd6 <itoa+0x3a>
    2cd2:	5d e2       	ldi	r21, 0x2D	; 45
    2cd4:	51 93       	st	Z+, r21
    2cd6:	10 82       	st	Z, r1
    2cd8:	c9 01       	movw	r24, r18
    2cda:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <strrev>

00002cde <strrev>:
    2cde:	dc 01       	movw	r26, r24
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	67 2f       	mov	r22, r23
    2ce4:	71 91       	ld	r23, Z+
    2ce6:	77 23       	and	r23, r23
    2ce8:	e1 f7       	brne	.-8      	; 0x2ce2 <strrev+0x4>
    2cea:	32 97       	sbiw	r30, 0x02	; 2
    2cec:	04 c0       	rjmp	.+8      	; 0x2cf6 <strrev+0x18>
    2cee:	7c 91       	ld	r23, X
    2cf0:	6d 93       	st	X+, r22
    2cf2:	70 83       	st	Z, r23
    2cf4:	62 91       	ld	r22, -Z
    2cf6:	ae 17       	cp	r26, r30
    2cf8:	bf 07       	cpc	r27, r31
    2cfa:	c8 f3       	brcs	.-14     	; 0x2cee <strrev+0x10>
    2cfc:	08 95       	ret

00002cfe <__udivmodhi4>:
    2cfe:	aa 1b       	sub	r26, r26
    2d00:	bb 1b       	sub	r27, r27
    2d02:	51 e1       	ldi	r21, 0x11	; 17
    2d04:	07 c0       	rjmp	.+14     	; 0x2d14 <__udivmodhi4_ep>

00002d06 <__udivmodhi4_loop>:
    2d06:	aa 1f       	adc	r26, r26
    2d08:	bb 1f       	adc	r27, r27
    2d0a:	a6 17       	cp	r26, r22
    2d0c:	b7 07       	cpc	r27, r23
    2d0e:	10 f0       	brcs	.+4      	; 0x2d14 <__udivmodhi4_ep>
    2d10:	a6 1b       	sub	r26, r22
    2d12:	b7 0b       	sbc	r27, r23

00002d14 <__udivmodhi4_ep>:
    2d14:	88 1f       	adc	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	5a 95       	dec	r21
    2d1a:	a9 f7       	brne	.-22     	; 0x2d06 <__udivmodhi4_loop>
    2d1c:	80 95       	com	r24
    2d1e:	90 95       	com	r25
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	08 95       	ret

00002d26 <_exit>:
    2d26:	f8 94       	cli

00002d28 <__stop_program>:
    2d28:	ff cf       	rjmp	.-2      	; 0x2d28 <__stop_program>
